type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "C"} {:global} $$C : [bv32]bv64;
axiom {:array_info "$$C"} {:global} {:elem_width 64} {:source_name "C"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C : bool;

var {:source_name "D"} {:global} $$D : [bv32]bv64;
axiom {:array_info "$$D"} {:global} {:elem_width 64} {:source_name "D"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$D : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$D : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$D : bool;

var {:source_name "E"} {:global} $$E : [bv32]bv64;
axiom {:array_info "$$E"} {:global} {:elem_width 64} {:source_name "E"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$E : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$E : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$E : bool;

var {:source_name "F"} {:global} $$F : [bv32]bv64;
axiom {:array_info "$$F"} {:global} {:elem_width 64} {:source_name "F"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$F : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$F : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$F : bool;

var {:source_name "G"} {:global} $$G : [bv32]bv64;
axiom {:array_info "$$G"} {:global} {:elem_width 64} {:source_name "G"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$G : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$G : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$G : bool;

var {:source_name "shared_F"} {:group_shared} $$kernel3.shared_F : [bv32]bv64;
axiom {:array_info "$$kernel3.shared_F"} {:group_shared} {:elem_width 64} {:source_name "shared_F"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel3.shared_F : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel3.shared_F : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel3.shared_F : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel3"} {:kernel} $kernel3($nl:bv32, $nj:bv32, $nm:bv32, $nk:bv32, $ni:bv32)
requires {:sourceloc_num 0} (if $nl == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $nj == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $nm == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if $nk == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 4} (if $ni == 512bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 5} (if BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($nl, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($nl, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($nj, 1bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($nj, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($nm, 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($nm, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($nk, 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($nk, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($ni, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($ni), 18446744071562067968bv64) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 6} (if (_WRITE_HAS_OCCURRED_$$G ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $ni), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $ni), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 7} (if (_WRITE_HAS_OCCURRED_$$F ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($nm, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 8} (if (_READ_HAS_OCCURRED_$$G ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $ni), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $ni), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 9} (if (_READ_HAS_OCCURRED_$$E ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1bv64)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 0bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 10} (if (_READ_HAS_OCCURRED_$$D ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nm, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nm), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nm), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 11} (if (_READ_HAS_OCCURRED_$$F ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($nm, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($ni, 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($ni, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nl, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nl))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 12} (if (_READ_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1bv64)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nm), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nm), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nm, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nm), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nm), 0bv32) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $cond:bv64;
  var $c3.0:bv64;
  var $cond90:bv64;
  var $c4.0:bv64;
  var $c4120.0:bv64;
  var $c2159.0:bv64;
  var $cond172:bv64;
  var $c0200.0:bv64;
  var $c1207.0:bv64;
  var $c2219.0:bv64;
  var $cond232:bv64;
  var $c3257.0:bv64;
  var $cond270:bv64;
  var $c4274.0:bv64;
  var $c2311.0:bv64;
  var $cond324:bv64;
  var v0:bv64;
  var v2:bv64;
  var v3:bool;
  var v7:bool;
  var v8:bool;
  var v6:bool;
  var v4:bool;
  var v5:bool;
  var v1:bv32;
  var v9:bv64;
  var v17:bv64;
  var v22:bv64;
  var v14:bv64;
  var v19:bv64;
  var v15:bv64;
  var v20:bv64;
  var v27:bv64;
  var v34:bv64;
  var v39:bv64;
  var v46:bv64;
  var v42:bv64;
  var v40:bv64;
  var v11:bool;
  var v12:bool;
  var v13:bool;
  var v16:bv32;
  var v10:bool;
  var v18:bool;
  var v21:bv32;
  var v25:bool;
  var v23:bool;
  var v24:bool;
  var v26:bool;
  var v35:bool;
  var v29:bool;
  var v28:bool;
  var v30:bool;
  var v33:bool;
  var v32:bool;
  var v31:bool;
  var v45:bool;
  var v44:bool;
  var v43:bool;
  var v36:bool;
  var v38:bool;
  var v37:bool;
  var v41:bv32;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := local_id_x;
  v2 := BV32_ZEXT64(v1);
  v3 := BV32_SGE($ni, 1bv32);
  goto $truebb, $falsebb;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v4 := BV64_SLT($c0.0, BV32_SEXT64($nl));
  goto $truebb0, $falsebb0;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $c1.0 := 0bv64;
  goto $for.cond.41;
$for.cond.41:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  v5 := BV64_SLT($c1.0, BV32_SEXT64($nj));
  goto $truebb1, $falsebb1;
$for.body.45:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v6 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb2, $falsebb2;
$if.then.50:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $c2.0 := 0bv64;
  goto $for.cond.51;
$for.cond.51:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  v7 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64));
  goto $truebb3, $falsebb3;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $cond := 31bv64;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  $cond := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v8 := BV64_SLE($c2.0, $cond);
  goto $truebb4, $falsebb4;
$for.body.61:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  assert {:sourceloc} {:sourceloc_num 25} true;
  v9 := $$F[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c2.0), BV32_SEXT64($nl)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 26} true;
  $$kernel3.shared_F[BV32_ADD(BV32_MUL($c2.0[32:0], 32bv32), v1)] := v9;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $c2.0 := BV64_ADD($c2.0, 1bv64);
  goto $for.cond.51;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  call {:sourceloc_num 30} $bugle_barrier(1bv1, 1bv1);
  v10 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb5, $falsebb5;
$if.then.77:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $c3.0 := 0bv64;
  goto $for.cond.78;
$for.cond.78:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v11 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64));
  goto $truebb6, $falsebb6;
$cond.true.84:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $cond90 := 31bv64;
  goto $cond.end.89;
$cond.false.85:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $cond90 := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64);
  goto $cond.end.89;
$cond.end.89:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v12 := BV64_SLE($c3.0, $cond90);
  goto $truebb7, $falsebb7;
$for.body.93:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $c4.0 := 0bv64;
  goto $for.cond.94;
$for.cond.94:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v13 := BV64_SLT($c4.0, BV32_SEXT64($nm));
  goto $truebb8, $falsebb8;
$for.body.98:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v14 := $$C[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c3.0), BV32_SEXT64($nm)), $c4.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 40} true;
  v15 := $$D[BV64_ADD(BV64_MUL($c4.0, BV32_SEXT64($nl)), BV64_ADD(v2, $c0.0))[32:0]];
  v16 := $c3.0[32:0];
  assert {:sourceloc} {:sourceloc_num 41} true;
  v17 := $$kernel3.shared_F[BV32_ADD(BV32_MUL(v16, 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 42} true;
  $$kernel3.shared_F[BV32_ADD(BV32_MUL(v16, 32bv32), v1)] := FADD64(v17, FMUL64(v14, v15));
  goto $for.inc.117;
$for.inc.117:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  $c4.0 := BV64_ADD($c4.0, 1bv64);
  goto $for.cond.94;
$for.end.119:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $c4120.0 := 0bv64;
  goto $for.cond.121;
$for.cond.121:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v18 := BV64_SLT($c4120.0, BV32_SEXT64($ni));
  goto $truebb9, $falsebb9;
$for.body.125:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  assert {:sourceloc} {:sourceloc_num 47} true;
  v19 := $$E[BV64_ADD(BV64_MUL($c4120.0, BV32_SEXT64($nj)), BV64_ADD($c1.0, $c3.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 48} true;
  v20 := $$kernel3.shared_F[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v1)];
  v21 := BV64_ADD(BV64_MUL($c4120.0, BV32_SEXT64($nl)), BV64_ADD(v2, $c0.0))[32:0];
  assert {:sourceloc} {:sourceloc_num 49} true;
  v22 := $$G[v21];
  assert {:sourceloc} {:sourceloc_num 50} true;
  $$G[v21] := FADD64(v22, FMUL64(v19, v20));
  goto $for.inc.144;
$for.inc.144:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  $c4120.0 := BV64_ADD($c4120.0, 1bv64);
  goto $for.cond.121;
$for.end.146:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $for.inc.147;
$for.inc.147:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $c3.0 := BV64_ADD($c3.0, 1bv64);
  goto $for.cond.78;
$for.end.149:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $if.end.150;
$if.end.150:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  call {:sourceloc_num 56} $bugle_barrier(1bv1, 1bv1);
  v23 := BV32_SGE($nm, 1bv32);
  goto $truebb10, $falsebb10;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  v24 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb11, $falsebb11;
$if.then.158:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $c2159.0 := 0bv64;
  goto $for.cond.160;
$for.cond.160:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v25 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64));
  goto $truebb12, $falsebb12;
$cond.true.166:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $cond172 := 31bv64;
  goto $cond.end.171;
$cond.false.167:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  $cond172 := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1.0), 1bv64);
  goto $cond.end.171;
$cond.end.171:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  v26 := BV64_SLE($c2159.0, $cond172);
  goto $truebb13, $falsebb13;
$for.body.175:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  assert {:sourceloc} {:sourceloc_num 64} true;
  v27 := $$kernel3.shared_F[BV32_ADD(BV32_MUL($c2159.0[32:0], 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 65} true;
  $$F[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c2159.0), BV32_SEXT64($nl)), BV64_ADD(v2, $c0.0))[32:0]] := v27;
  goto $for.inc.187;
$for.inc.187:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  $c2159.0 := BV64_ADD($c2159.0, 1bv64);
  goto $for.cond.160;
$for.end.189:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.190;
$if.end.190:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.inc.191;
$for.inc.191:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  $c1.0 := BV64_ADD($c1.0, 32bv64);
  goto $for.cond.41;
$for.end.193:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $for.inc.194;
$for.inc.194:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $c0.0 := BV64_ADD($c0.0, 1048576bv64);
  goto $for.cond;
$for.end.196:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $if.end.350;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v28 := BV32_SGE($nm, 1bv32);
  goto $truebb14, $falsebb14;
$if.then.199:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  $c0200.0 := BV64_MUL(32bv64, v0);
  goto $for.cond.202;
$for.cond.202:
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  v29 := BV64_SLT($c0200.0, BV32_SEXT64($nl));
  goto $truebb15, $falsebb15;
$for.body.206:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  $c1207.0 := 0bv64;
  goto $for.cond.208;
$for.cond.208:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  v30 := BV64_SLT($c1207.0, BV32_SEXT64($nj));
  goto $truebb16, $falsebb16;
$for.body.212:
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  v31 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0200.0), 1bv64));
  goto $truebb17, $falsebb17;
$if.then.218:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $c2219.0 := 0bv64;
  goto $for.cond.220;
$for.cond.220:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v32 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64));
  goto $truebb18, $falsebb18;
$cond.true.226:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  $cond232 := 31bv64;
  goto $cond.end.231;
$cond.false.227:
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  $cond232 := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64);
  goto $cond.end.231;
$cond.end.231:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  v33 := BV64_SLE($c2219.0, $cond232);
  goto $truebb19, $falsebb19;
$for.body.235:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v34 := $$F[BV64_ADD(BV64_MUL(BV64_ADD($c1207.0, $c2219.0), BV32_SEXT64($nl)), BV64_ADD(v2, $c0200.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$kernel3.shared_F[BV32_ADD(BV32_MUL($c2219.0[32:0], 32bv32), v1)] := v34;
  goto $for.inc.247;
$for.inc.247:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  $c2219.0 := BV64_ADD($c2219.0, 1bv64);
  goto $for.cond.220;
$for.end.249:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $if.end.250;
$if.end.250:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  call {:sourceloc_num 90} $bugle_barrier(1bv1, 1bv1);
  v35 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0200.0), 1bv64));
  goto $truebb20, $falsebb20;
$if.then.256:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  $c3257.0 := 0bv64;
  goto $for.cond.258;
$for.cond.258:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  v36 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64));
  goto $truebb21, $falsebb21;
$cond.true.264:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  $cond270 := 31bv64;
  goto $cond.end.269;
$cond.false.265:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  $cond270 := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64);
  goto $cond.end.269;
$cond.end.269:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  v37 := BV64_SLE($c3257.0, $cond270);
  goto $truebb22, $falsebb22;
$for.body.273:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  $c4274.0 := 0bv64;
  goto $for.cond.275;
$for.cond.275:
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  v38 := BV64_SLT($c4274.0, BV32_SEXT64($nm));
  goto $truebb23, $falsebb23;
$for.body.279:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  assert {:sourceloc} {:sourceloc_num 99} true;
  v39 := $$C[BV64_ADD(BV64_MUL(BV64_ADD($c1207.0, $c3257.0), BV32_SEXT64($nm)), $c4274.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 100} true;
  v40 := $$D[BV64_ADD(BV64_MUL($c4274.0, BV32_SEXT64($nl)), BV64_ADD(v2, $c0200.0))[32:0]];
  v41 := $c3257.0[32:0];
  assert {:sourceloc} {:sourceloc_num 101} true;
  v42 := $$kernel3.shared_F[BV32_ADD(BV32_MUL(v41, 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 102} true;
  $$kernel3.shared_F[BV32_ADD(BV32_MUL(v41, 32bv32), v1)] := FADD64(v42, FMUL64(v39, v40));
  goto $for.inc.298;
$for.inc.298:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  $c4274.0 := BV64_ADD($c4274.0, 1bv64);
  goto $for.cond.275;
$for.end.300:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $for.inc.301;
$for.inc.301:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  $c3257.0 := BV64_ADD($c3257.0, 1bv64);
  goto $for.cond.258;
$for.end.303:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.end.304;
$if.end.304:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  call {:sourceloc_num 108} $bugle_barrier(1bv1, 1bv1);
  v43 := BV64_SGE(BV32_SEXT64($nl), BV64_ADD(BV64_ADD(v2, $c0200.0), 1bv64));
  goto $truebb24, $falsebb24;
$if.then.310:
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  $c2311.0 := 0bv64;
  goto $for.cond.312;
$for.cond.312:
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  v44 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64));
  goto $truebb25, $falsebb25;
$cond.true.318:
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  $cond324 := 31bv64;
  goto $cond.end.323;
$cond.false.319:
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  $cond324 := BV64_SUB(BV64_SUB(BV32_SEXT64($nj), $c1207.0), 1bv64);
  goto $cond.end.323;
$cond.end.323:
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  v45 := BV64_SLE($c2311.0, $cond324);
  goto $truebb26, $falsebb26;
$for.body.327:
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  assert {:sourceloc} {:sourceloc_num 115} true;
  v46 := $$kernel3.shared_F[BV32_ADD(BV32_MUL($c2311.0[32:0], 32bv32), v1)];
  assert {:sourceloc} {:sourceloc_num 116} true;
  $$F[BV64_ADD(BV64_MUL(BV64_ADD($c1207.0, $c2311.0), BV32_SEXT64($nl)), BV64_ADD(v2, $c0200.0))[32:0]] := v46;
  goto $for.inc.339;
$for.inc.339:
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  $c2311.0 := BV64_ADD($c2311.0, 1bv64);
  goto $for.cond.312;
$for.end.341:
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.end.342;
$if.end.342:
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $for.inc.343;
$for.inc.343:
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  $c1207.0 := BV64_ADD($c1207.0, 32bv64);
  goto $for.cond.208;
$for.end.345:
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $for.inc.346;
$for.inc.346:
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  $c0200.0 := BV64_ADD($c0200.0, 1048576bv64);
  goto $for.cond.202;
$for.end.348:
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $if.end.349;
$if.end.349:
  assert {:block_sourceloc} true;
  goto $if.end.350;
$if.end.350:
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.then;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.else;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $for.body;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $for.end.196;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $for.body.45;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $for.end.193;
$truebb2:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $if.then.50;
$falsebb2:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $if.end;
$truebb3:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $cond.true;
$falsebb3:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $cond.false;
$truebb4:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $for.body.61;
$falsebb4:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $for.end;
$truebb5:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.then.77;
$falsebb5:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $if.end.150;
$truebb6:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $cond.true.84;
$falsebb6:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $cond.false.85;
$truebb7:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $for.body.93;
$falsebb7:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $for.end.149;
$truebb8:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $for.body.98;
$falsebb8:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $for.end.119;
$truebb9:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $for.body.125;
$falsebb9:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $for.end.146;
$truebb10:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $land.lhs.true;
$falsebb10:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $if.end.190;
$truebb11:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $if.then.158;
$falsebb11:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $if.end.190;
$truebb12:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $cond.true.166;
$falsebb12:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $cond.false.167;
$truebb13:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $for.body.175;
$falsebb13:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $for.end.189;
$truebb14:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $if.then.199;
$falsebb14:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  goto $if.end.349;
$truebb15:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $for.body.206;
$falsebb15:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $for.end.348;
$truebb16:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  goto $for.body.212;
$falsebb16:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $for.end.345;
$truebb17:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $if.then.218;
$falsebb17:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  goto $if.end.250;
$truebb18:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $cond.true.226;
$falsebb18:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 164} true;
  goto $cond.false.227;
$truebb19:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 165} true;
  goto $for.body.235;
$falsebb19:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 166} true;
  goto $for.end.249;
$truebb20:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 167} true;
  goto $if.then.256;
$falsebb20:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 168} true;
  goto $if.end.304;
$truebb21:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 169} true;
  goto $cond.true.264;
$falsebb21:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 170} true;
  goto $cond.false.265;
$truebb22:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 171} true;
  goto $for.body.273;
$falsebb22:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 172} true;
  goto $for.end.303;
$truebb23:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 173} true;
  goto $for.body.279;
$falsebb23:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 174} true;
  goto $for.end.300;
$truebb24:
  assume {:partition} v43;
  assert {:block_sourceloc} {:sourceloc_num 175} true;
  goto $if.then.310;
$falsebb24:
  assume {:partition} !v43;
  assert {:block_sourceloc} {:sourceloc_num 176} true;
  goto $if.end.342;
$truebb25:
  assume {:partition} v44;
  assert {:block_sourceloc} {:sourceloc_num 177} true;
  goto $cond.true.318;
$falsebb25:
  assume {:partition} !v44;
  assert {:block_sourceloc} {:sourceloc_num 178} true;
  goto $cond.false.319;
$truebb26:
  assume {:partition} v45;
  assert {:block_sourceloc} {:sourceloc_num 179} true;
  goto $for.body.327;
$falsebb26:
  assume {:partition} !v45;
  assert {:block_sourceloc} {:sourceloc_num 180} true;
  goto $for.end.341;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
