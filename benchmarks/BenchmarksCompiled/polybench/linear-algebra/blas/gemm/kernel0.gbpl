type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "A"} {:global} $$A : [bv32]bv64;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "B"} {:global} $$B : [bv32]bv64;
axiom {:array_info "$$B"} {:global} {:elem_width 64} {:source_name "B"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$B : bool;

var {:source_name "C"} {:global} $$C : [bv32]bv64;
axiom {:array_info "$$C"} {:global} {:elem_width 64} {:source_name "C"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C : bool;

var {:source_name "private_C"} $$private_C : [bv32]bv64;
axiom {:array_info "$$private_C"} {:elem_width 64} {:source_name "private_C"} {:source_elem_width 64} {:source_dimensions "1,2"} true;

var {:source_name "shared_A"} {:group_shared} $$kernel0.shared_A : [bv32]bv64;
axiom {:array_info "$$kernel0.shared_A"} {:group_shared} {:elem_width 64} {:source_name "shared_A"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel0.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel0.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel0.shared_A : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel0"} {:kernel} $kernel0($alpha:bv64, $beta:bv64, $nj:bv32, $nk:bv32, $ni:bv32)
requires {:sourceloc_num 0} (if $nj == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $nk == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if $ni == 4096bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 3} (if BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($nj, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($nj, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($nk, 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($nk, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($ni, 1bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($ni, 2147483647bv32) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_WRITE_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk), $ni), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk), $ni)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nk, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk), $ni))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nk))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($ni, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $ni))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$B ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1bv64)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($nk, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $nk), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), $nk), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($nj, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $nj))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $c4.0:bv64;
  var $cond:bv64;
  var $c3.0:bv64;
  var $cond143:bv64;
  var v1:bv64;
  var v3:bv64;
  var v2:bv32;
  var v0:bv64;
  var v4:bv64;
  var v5:bool;
  var v6:bool;
  var v40:bv64;
  var v42:bv64;
  var v11:bv64;
  var v9:bv64;
  var v20:bv64;
  var v16:bv64;
  var v25:bv64;
  var v26:bv64;
  var v27:bv64;
  var v22:bv64;
  var v31:bv64;
  var v30:bv64;
  var v29:bv64;
  var v35:bv64;
  var v37:bv64;
  var v10:bool;
  var v8:bool;
  var v7:bool;
  var v21:bool;
  var v19:bool;
  var v17:bool;
  var v18:bool;
  var v13:bool;
  var v12:bool;
  var v14:bool;
  var v15:bool;
  var v24:bool;
  var v23:bool;
  var v28:bool;
  var v32:bool;
  var v38:bool;
  var v39:bool;
  var v41:bool;
  var v33:bool;
  var v34:bool;
  var v36:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v5 := BV64_SLT($c0.0, BV32_SEXT64($ni));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $c1.0 := BV64_MUL(32bv64, v1);
  goto $for.cond.29;
$for.cond.29:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v6 := BV64_SLT($c1.0, BV32_SEXT64($nj));
  goto $truebb0, $falsebb0;
$for.body.33:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v7 := BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb1, $falsebb1;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v8 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 1bv64));
  goto $truebb2, $falsebb2;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v9 := $$C[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($nj)), BV64_ADD(v4, $c1.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$private_C[0bv32] := v9;
  v10 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 17bv64));
  goto $truebb3, $falsebb3;
$if.then.55:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  assert {:sourceloc} {:sourceloc_num 18} true;
  v11 := $$C[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($nj)), BV64_ADD(BV64_ADD(v4, $c1.0), 16bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 19} true;
  $$private_C[1bv32] := v11;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  goto $if.end.66;
$if.end.66:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  $c2.0 := 0bv64;
  goto $for.cond.67;
$for.cond.67:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v12 := BV64_SLT($c2.0, BV32_SEXT64($nk));
  goto $truebb4, $falsebb4;
$for.body.71:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb5, $falsebb5;
$if.then.77:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $c4.0 := v4;
  goto $for.cond.78;
$for.cond.78:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v14 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nk), $c2.0), 1bv64));
  goto $truebb6, $falsebb6;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $cond := 31bv64;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $cond := BV64_SUB(BV64_SUB(BV32_SEXT64($nk), $c2.0), 1bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  v15 := BV64_SLE($c4.0, $cond);
  goto $truebb7, $falsebb7;
$for.body.88:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  assert {:sourceloc} {:sourceloc_num 30} true;
  v16 := $$A[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($nk)), BV64_ADD($c2.0, $c4.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 31} true;
  $$kernel0.shared_A[BV32_ADD(BV32_MUL(v2, 32bv32), $c4.0[32:0])] := v16;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $c4.0 := BV64_ADD($c4.0, 16bv64);
  goto $for.cond.78;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $if.end.101;
$if.end.101:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  call {:sourceloc_num 35} $bugle_barrier(1bv1, 1bv1);
  v17 := BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb8, $falsebb8;
$land.lhs.true.107:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v18 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 1bv64));
  goto $truebb9, $falsebb9;
$if.then.113:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  v19 := $c2.0 == 0bv64;
  goto $truebb10, $falsebb10;
$if.then.116:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  assert {:sourceloc} {:sourceloc_num 39} true;
  v20 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 40} true;
  $$private_C[0bv32] := FMUL64(v20, $beta);
  v21 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 17bv64));
  goto $truebb11, $falsebb11;
$if.then.125:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  assert {:sourceloc} {:sourceloc_num 42} true;
  v22 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 43} true;
  $$private_C[1bv32] := FMUL64(v22, $beta);
  goto $if.end.129;
$if.end.129:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  goto $if.end.130;
$if.end.130:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  $c3.0 := 0bv64;
  goto $for.cond.131;
$for.cond.131:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  v23 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($nk), $c2.0), 1bv64));
  goto $truebb12, $falsebb12;
$cond.true.137:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $cond143 := 31bv64;
  goto $cond.end.142;
$cond.false.138:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  $cond143 := BV64_SUB(BV64_SUB(BV32_SEXT64($nk), $c2.0), 1bv64);
  goto $cond.end.142;
$cond.end.142:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  v24 := BV64_SLE($c3.0, $cond143);
  goto $truebb13, $falsebb13;
$for.body.146:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  assert {:sourceloc} {:sourceloc_num 51} true;
  v25 := $$kernel0.shared_A[BV32_ADD(BV32_MUL(v2, 32bv32), $c3.0[32:0])];
  assert {:sourceloc} {:sourceloc_num 52} true;
  v26 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c3.0), BV32_SEXT64($nj)), BV64_ADD(v4, $c1.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 53} true;
  v27 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 54} true;
  $$private_C[0bv32] := FADD64(v27, FMUL64(FMUL64($alpha, v25), v26));
  v28 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 17bv64));
  goto $truebb14, $falsebb14;
$if.then.168:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  assert {:sourceloc} {:sourceloc_num 56} true;
  v29 := $$kernel0.shared_A[BV32_ADD(BV32_MUL(v2, 32bv32), $c3.0[32:0])];
  assert {:sourceloc} {:sourceloc_num 57} true;
  v30 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c3.0), BV32_SEXT64($nj)), BV64_ADD(BV64_ADD(v4, $c1.0), 16bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 58} true;
  v31 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 59} true;
  $$private_C[1bv32] := FADD64(v31, FMUL64(FMUL64($alpha, v29), v30));
  goto $if.end.186;
$if.end.186:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.inc.187;
$for.inc.187:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  $c3.0 := BV64_ADD($c3.0, 1bv64);
  goto $for.cond.131;
$for.end.189:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $if.end.190;
$if.end.190:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  call {:sourceloc_num 64} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.191;
$for.inc.191:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $c2.0 := BV64_ADD($c2.0, 32bv64);
  goto $for.cond.67;
$for.end.193:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  v32 := $nk == 0bv32;
  goto $truebb15, $falsebb15;
$if.then.196:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  call {:sourceloc_num 68} $bugle_barrier(1bv1, 1bv1);
  v33 := BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb16, $falsebb16;
$land.lhs.true.202:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  v34 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 1bv64));
  goto $truebb17, $falsebb17;
$if.then.208:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  assert {:sourceloc} {:sourceloc_num 71} true;
  v35 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 72} true;
  $$private_C[0bv32] := FMUL64(v35, $beta);
  v36 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 17bv64));
  goto $truebb18, $falsebb18;
$if.then.217:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  assert {:sourceloc} {:sourceloc_num 74} true;
  v37 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 75} true;
  $$private_C[1bv32] := FMUL64(v37, $beta);
  goto $if.end.221;
$if.end.221:
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $if.end.222;
$if.end.222:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  call {:sourceloc_num 78} $bugle_barrier(1bv1, 1bv1);
  goto $if.end.223;
$if.end.223:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v38 := BV64_SGE(BV32_SEXT64($ni), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb19, $falsebb19;
$land.lhs.true.229:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v39 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 1bv64));
  goto $truebb20, $falsebb20;
$if.then.235:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  assert {:sourceloc} {:sourceloc_num 82} true;
  v40 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 83} true;
  $$C[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($nj)), BV64_ADD(v4, $c1.0))[32:0]] := v40;
  v41 := BV64_SGE(BV32_SEXT64($nj), BV64_ADD(BV64_ADD(v4, $c1.0), 17bv64));
  goto $truebb21, $falsebb21;
$if.then.250:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  assert {:sourceloc} {:sourceloc_num 85} true;
  v42 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 86} true;
  $$C[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c0.0), BV32_SEXT64($nj)), BV64_ADD(BV64_ADD(v4, $c1.0), 16bv64))[32:0]] := v42;
  goto $if.end.261;
$if.end.261:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $if.end.262;
$if.end.262:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  call {:sourceloc_num 89} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.263;
$for.inc.263:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $c1.0 := BV64_ADD($c1.0, 8192bv64);
  goto $for.cond.29;
$for.end.265:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.inc.266;
$for.inc.266:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  $c0.0 := BV64_ADD($c0.0, 8192bv64);
  goto $for.cond;
$for.end.268:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $for.end.268;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $for.body.33;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $for.end.265;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $land.lhs.true;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $if.end.66;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $if.then;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.end.66;
$truebb3:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $if.then.55;
$falsebb3:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.end;
$truebb4:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $for.body.71;
$falsebb4:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $for.end.193;
$truebb5:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then.77;
$falsebb5:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end.101;
$truebb6:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $cond.true;
$falsebb6:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $cond.false;
$truebb7:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.body.88;
$falsebb7:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $for.end;
$truebb8:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $land.lhs.true.107;
$falsebb8:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.end.190;
$truebb9:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $if.then.113;
$falsebb9:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $if.end.190;
$truebb10:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $if.then.116;
$falsebb10:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $if.end.130;
$truebb11:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.then.125;
$falsebb11:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.end.129;
$truebb12:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $cond.true.137;
$falsebb12:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $cond.false.138;
$truebb13:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $for.body.146;
$falsebb13:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $for.end.189;
$truebb14:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $if.then.168;
$falsebb14:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.end.186;
$truebb15:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.then.196;
$falsebb15:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $if.end.223;
$truebb16:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $land.lhs.true.202;
$falsebb16:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $if.end.222;
$truebb17:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $if.then.208;
$falsebb17:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $if.end.222;
$truebb18:
  assume {:partition} v36;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $if.then.217;
$falsebb18:
  assume {:partition} !v36;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $if.end.221;
$truebb19:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $land.lhs.true.229;
$falsebb19:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $if.end.262;
$truebb20:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.then.235;
$falsebb20:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.end.262;
$truebb21:
  assume {:partition} v41;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $if.then.250;
$falsebb21:
  assume {:partition} !v41;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $if.end.261;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 128bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
