type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "A"} {:global} $$A : [bv32]bv64;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "B"} {:global} $$B : [bv32]bv64;
axiom {:array_info "$$B"} {:global} {:elem_width 64} {:source_name "B"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$B : bool;

var {:source_name "shared_A"} {:group_shared} $$kernel0.shared_A : [bv32]bv64;
axiom {:array_info "$$kernel0.shared_A"} {:group_shared} {:elem_width 64} {:source_name "shared_A"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel0.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel0.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel0.shared_A : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsgt"} BV64_SGT(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV32_SREM(bv32, bv32) : bv32;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvult"} BV32_ULT(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel0"} {:kernel} $kernel0($alpha:bv64, $n:bv32, $m:bv32)
requires {:sourceloc_num 0} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $m == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($n, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($m, 1bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$B ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$B ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$A ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_SEXT64($m), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 2bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_MUL(32bv32, (if BV32_ULT(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 0bv32) then BV32_SUB(0bv32, BV32_UDIV(BV32_SUB(BV32_ADD(BV32_SUB(0bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m)), 32bv32), 1bv32), 32bv32)) else BV32_UDIV(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 32bv32))))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 32bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($m, 33bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_ZEXT64(local_id_x) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 1bv32) == $m then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32) == $m then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SREM(BV32_SUB($m, 1bv32), 32bv32) == 0bv32 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $cond:bv64;
  var $c3.0:bv64;
  var $cond54:bv64;
  var $cond85:bv64;
  var $c4.0:bv64;
  var $cond98:bv64;
  var $c5.0:bv64;
  var $cond114:bv64;
  var $c5149.0:bv64;
  var $cond162:bv64;
  var $c2259.0:bv64;
  var $c5271.0:bv64;
  var v1:bv32;
  var v0:bv64;
  var v2:bv64;
  var v7:bool;
  var v5:bool;
  var v6:bool;
  var v4:bool;
  var v3:bool;
  var v9:bool;
  var v10:bool;
  var v8:bool;
  var v11:bv64;
  var v18:bv64;
  var v21:bv64;
  var v19:bv64;
  var v30:bv64;
  var v25:bv64;
  var v36:bv64;
  var v32:bv64;
  var v40:bv64;
  var v12:bool;
  var v13:bool;
  var v14:bool;
  var v15:bool;
  var v17:bool;
  var v16:bool;
  var v24:bool;
  var v28:bool;
  var v26:bool;
  var v27:bool;
  var v20:bv32;
  var v22:bool;
  var v23:bool;
  var v38:bool;
  var v37:bool;
  var v31:bool;
  var v29:bool;
  var v35:bool;
  var v34:bool;
  var v33:bool;
  var v39:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := local_id_x;
  v2 := BV32_ZEXT64(v1);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v3 := BV64_SLT($c0.0, BV32_SEXT64($n));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  $c1.0 := 0bv64;
  goto $for.cond.17;
$for.cond.17:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v4 := BV64_SLE($c1.0, BV32_SEXT64($m));
  goto $truebb0, $falsebb0;
$for.body.21:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v5 := BV64_SGE(BV32_SEXT64($m), BV64_ADD($c1.0, 1bv64));
  goto $truebb1, $falsebb1;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $c2.0 := 0bv64;
  goto $for.cond.25;
$for.cond.25:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v6 := BV64_SLT(BV32_SEXT64(BV32_SUB($m, 2bv32)), BV64_ADD($c1.0, 30bv64));
  goto $truebb2, $falsebb2;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cond := BV32_SEXT64(BV32_SUB($m, 2bv32));
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  $cond := BV64_ADD($c1.0, 30bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v7 := BV64_SLE($c2.0, $cond);
  goto $truebb3, $falsebb3;
$for.body.35:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  v8 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v2, $c2.0), 1bv64));
  goto $truebb4, $falsebb4;
$if.then.41:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $c3.0 := 0bv64;
  goto $for.cond.42;
$for.cond.42:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v9 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64));
  goto $truebb5, $falsebb5;
$cond.true.48:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $cond54 := 31bv64;
  goto $cond.end.53;
$cond.false.49:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $cond54 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64);
  goto $cond.end.53;
$cond.end.53:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v10 := BV64_SLE($c3.0, $cond54);
  goto $truebb6, $falsebb6;
$for.body.57:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  assert {:sourceloc} {:sourceloc_num 23} true;
  v11 := $$A[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c3.0), BV32_SEXT64($m)), BV64_ADD(v2, $c2.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 24} true;
  $$kernel0.shared_A[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v1)] := v11;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $c3.0 := BV64_ADD($c3.0, 1bv64);
  goto $for.cond.42;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  call {:sourceloc_num 28} $bugle_barrier(1bv1, 1bv1);
  v12 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb7, $falsebb7;
$if.then.73:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  v13 := BV64_SGT(0bv64, BV64_ADD(BV64_ADD(BV64_SUB(0bv64, $c1.0), $c2.0), 1bv64));
  goto $truebb8, $falsebb8;
$cond.true.79:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $cond85 := 0bv64;
  goto $cond.end.84;
$cond.false.80:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $cond85 := BV64_ADD(BV64_ADD(BV64_SUB(0bv64, $c1.0), $c2.0), 1bv64);
  goto $cond.end.84;
$cond.end.84:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  $c4.0 := $cond85;
  goto $for.cond.86;
$for.cond.86:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  v14 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64));
  goto $truebb9, $falsebb9;
$cond.true.92:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $cond98 := 31bv64;
  goto $cond.end.97;
$cond.false.93:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $cond98 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64);
  goto $cond.end.97;
$cond.end.97:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  v15 := BV64_SLE($c4.0, $cond98);
  goto $truebb10, $falsebb10;
$for.body.101:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $c5.0 := 0bv64;
  goto $for.cond.102;
$for.cond.102:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  v16 := BV64_SLT(31bv64, BV64_SUB(BV64_ADD(BV64_SUB($c1.0, $c2.0), $c4.0), 1bv64));
  goto $truebb11, $falsebb11;
$cond.true.108:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $cond114 := 31bv64;
  goto $cond.end.113;
$cond.false.109:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $cond114 := BV64_SUB(BV64_ADD(BV64_SUB($c1.0, $c2.0), $c4.0), 1bv64);
  goto $cond.end.113;
$cond.end.113:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v17 := BV64_SLE($c5.0, $cond114);
  goto $truebb12, $falsebb12;
$for.body.117:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  assert {:sourceloc} {:sourceloc_num 43} true;
  v18 := $$kernel0.shared_A[BV32_ADD(BV32_MUL($c4.0[32:0], 32bv32), $c5.0[32:0])];
  assert {:sourceloc} {:sourceloc_num 44} true;
  v19 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c1.0, $c4.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0]];
  v20 := BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c5.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v21 := $$B[v20];
  assert {:sourceloc} {:sourceloc_num 46} true;
  $$B[v20] := FADD64(v21, FMUL64(v18, v19));
  goto $for.inc.138;
$for.inc.138:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $c5.0 := BV64_ADD($c5.0, 1bv64);
  goto $for.cond.102;
$for.end.140:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $for.inc.141;
$for.inc.141:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  $c4.0 := BV64_ADD($c4.0, 1bv64);
  goto $for.cond.86;
$for.end.143:
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  v22 := BV64_SGE(BV64_ADD($c1.0, 31bv64), BV32_SEXT64($m));
  goto $truebb13, $falsebb13;
$if.then.148:
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  $c5149.0 := 0bv64;
  goto $for.cond.150;
$for.cond.150:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  v23 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64));
  goto $truebb14, $falsebb14;
$cond.true.156:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  $cond162 := 31bv64;
  goto $cond.end.161;
$cond.false.157:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  $cond162 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64);
  goto $cond.end.161;
$cond.end.161:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  v24 := BV64_SLE($c5149.0, $cond162);
  goto $truebb15, $falsebb15;
$for.body.165:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  assert {:sourceloc} {:sourceloc_num 57} true;
  v25 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c5149.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 58} true;
  $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c5149.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0]] := FMUL64($alpha, v25);
  goto $for.inc.181;
$for.inc.181:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  $c5149.0 := BV64_ADD($c5149.0, 1bv64);
  goto $for.cond.150;
$for.end.183:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $if.end.184;
$if.end.184:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $if.end.185;
$if.end.185:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  call {:sourceloc_num 63} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.186;
$for.inc.186:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $c2.0 := BV64_ADD($c2.0, 32bv64);
  goto $for.cond.25;
$for.end.188:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  v26 := BV32_SGE($m, 33bv32);
  goto $truebb16, $falsebb16;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  v27 := BV64_ADD($c1.0, 1bv64) == BV32_SEXT64($m);
  goto $truebb17, $falsebb17;
$land.lhs.true.195:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  v28 := BV32_SREM(BV32_SUB($m, 1bv32), 32bv32) == 0bv32;
  goto $truebb18, $falsebb18;
$if.then.199:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  v29 := v2 == 0bv64;
  goto $truebb19, $falsebb19;
$if.then.202:
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  assert {:sourceloc} {:sourceloc_num 70} true;
  v30 := $$A[BV32_ADD(BV32_MUL(BV32_SUB($m, 1bv32), $m), BV32_SUB($m, 1bv32))];
  assert {:sourceloc} {:sourceloc_num 71} true;
  $$kernel0.shared_A[0bv32] := v30;
  goto $if.end.208;
$if.end.208:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  call {:sourceloc_num 73} $bugle_barrier(1bv1, 1bv1);
  v31 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb20, $falsebb20;
$if.then.214:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v32 := $$B[BV64_ADD(BV32_SEXT64(BV32_MUL(BV32_SUB($m, 1bv32), $n)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 76} true;
  $$B[BV64_ADD(BV32_SEXT64(BV32_MUL(BV32_SUB($m, 1bv32), $n)), BV64_ADD(v2, $c0.0))[32:0]] := FMUL64($alpha, v32);
  goto $if.end.230;
$if.end.230:
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  call {:sourceloc_num 78} $bugle_barrier(1bv1, 1bv1);
  goto $if.end.231;
$if.end.231:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  v33 := $m == 1bv32;
  goto $truebb21, $falsebb21;
$land.lhs.true.234:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  v34 := $c1.0 == 0bv64;
  goto $truebb22, $falsebb22;
$if.then.237:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  call {:sourceloc_num 82} $bugle_barrier(1bv1, 1bv1);
  v35 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb23, $falsebb23;
$if.then.243:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  assert {:sourceloc} {:sourceloc_num 84} true;
  v36 := $$B[BV64_ADD(BV32_SEXT64(BV32_MUL(0bv32, $n)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 85} true;
  $$B[BV64_ADD(BV32_SEXT64(BV32_MUL(0bv32, $n)), BV64_ADD(v2, $c0.0))[32:0]] := FMUL64($alpha, v36);
  goto $if.end.257;
$if.end.257:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  call {:sourceloc_num 87} $bugle_barrier(1bv1, 1bv1);
  goto $if.end.258;
$if.end.258:
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $if.end.298;
$if.else:
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  $c2259.0 := 0bv64;
  goto $for.cond.260;
$for.cond.260:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  v37 := BV64_SLT($c2259.0, BV32_SEXT64($m));
  goto $truebb24, $falsebb24;
$for.body.264:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  call {:sourceloc_num 92} $bugle_barrier(1bv1, 1bv1);
  v38 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v2, $c0.0), 1bv64));
  goto $truebb25, $falsebb25;
$if.then.270:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  $c5271.0 := 0bv64;
  goto $for.cond.272;
$for.cond.272:
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  v39 := BV64_SLE($c5271.0, 31bv64);
  goto $truebb26, $falsebb26;
$for.body.275:
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  assert {:sourceloc} {:sourceloc_num 96} true;
  v40 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2259.0, $c5271.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 97} true;
  $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2259.0, $c5271.0), BV32_SEXT64($n)), BV64_ADD(v2, $c0.0))[32:0]] := FMUL64($alpha, v40);
  goto $for.inc.291;
$for.inc.291:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  $c5271.0 := BV64_ADD($c5271.0, 1bv64);
  goto $for.cond.272;
$for.end.293:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $if.end.294;
$if.end.294:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  call {:sourceloc_num 101} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.295;
$for.inc.295:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  $c2259.0 := BV64_ADD($c2259.0, 32bv64);
  goto $for.cond.260;
$for.end.297:
  assert {:block_sourceloc} true;
  goto $if.end.298;
$if.end.298:
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $for.inc.299;
$for.inc.299:
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  $c1.0 := BV64_ADD($c1.0, 32bv64);
  goto $for.cond.17;
$for.end.301:
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $for.inc.302;
$for.inc.302:
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  $c0.0 := BV64_ADD($c0.0, 1048576bv64);
  goto $for.cond;
$for.end.304:
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $for.end.304;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $for.body.21;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $for.end.301;
$truebb1:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $if.then;
$falsebb1:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $if.else;
$truebb2:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $cond.true;
$falsebb2:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $cond.false;
$truebb3:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $for.body.35;
$falsebb3:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $for.end.188;
$truebb4:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $if.then.41;
$falsebb4:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $if.end;
$truebb5:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $cond.true.48;
$falsebb5:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $cond.false.49;
$truebb6:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $for.body.57;
$falsebb6:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $for.end;
$truebb7:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $if.then.73;
$falsebb7:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.end.185;
$truebb8:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $cond.true.79;
$falsebb8:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $cond.false.80;
$truebb9:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $cond.true.92;
$falsebb9:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $cond.false.93;
$truebb10:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $for.body.101;
$falsebb10:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $for.end.143;
$truebb11:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $cond.true.108;
$falsebb11:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $cond.false.109;
$truebb12:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $for.body.117;
$falsebb12:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $for.end.140;
$truebb13:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $if.then.148;
$falsebb13:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $if.end.184;
$truebb14:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $cond.true.156;
$falsebb14:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $cond.false.157;
$truebb15:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $for.body.165;
$falsebb15:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $for.end.183;
$truebb16:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $land.lhs.true;
$falsebb16:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $if.end.231;
$truebb17:
  assume {:partition} v27;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $land.lhs.true.195;
$falsebb17:
  assume {:partition} !v27;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.end.231;
$truebb18:
  assume {:partition} v28;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $if.then.199;
$falsebb18:
  assume {:partition} !v28;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $if.end.231;
$truebb19:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $if.then.202;
$falsebb19:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $if.end.208;
$truebb20:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $if.then.214;
$falsebb20:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $if.end.230;
$truebb21:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $land.lhs.true.234;
$falsebb21:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 153} true;
  goto $if.end.258;
$truebb22:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 154} true;
  goto $if.then.237;
$falsebb22:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 155} true;
  goto $if.end.258;
$truebb23:
  assume {:partition} v35;
  assert {:block_sourceloc} {:sourceloc_num 156} true;
  goto $if.then.243;
$falsebb23:
  assume {:partition} !v35;
  assert {:block_sourceloc} {:sourceloc_num 157} true;
  goto $if.end.257;
$truebb24:
  assume {:partition} v37;
  assert {:block_sourceloc} {:sourceloc_num 158} true;
  goto $for.body.264;
$falsebb24:
  assume {:partition} !v37;
  assert {:block_sourceloc} {:sourceloc_num 159} true;
  goto $for.end.297;
$truebb25:
  assume {:partition} v38;
  assert {:block_sourceloc} {:sourceloc_num 160} true;
  goto $if.then.270;
$falsebb25:
  assume {:partition} !v38;
  assert {:block_sourceloc} {:sourceloc_num 161} true;
  goto $if.end.294;
$truebb26:
  assume {:partition} v39;
  assert {:block_sourceloc} {:sourceloc_num 162} true;
  goto $for.body.275;
$falsebb26:
  assume {:partition} !v39;
  assert {:block_sourceloc} {:sourceloc_num 163} true;
  goto $for.end.293;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
