type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "A"} {:global} $$A : [bv32]bv64;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "B"} {:global} $$B : [bv32]bv64;
axiom {:array_info "$$B"} {:global} {:elem_width 64} {:source_name "B"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$B : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$B : bool;

var {:source_name "C"} {:global} $$C : [bv32]bv64;
axiom {:array_info "$$C"} {:global} {:elem_width 64} {:source_name "C"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$C : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$C : bool;

var {:source_name "private_C"} $$private_C : [bv32]bv64;
axiom {:array_info "$$private_C"} {:elem_width 64} {:source_name "private_C"} {:source_elem_width 64} {:source_dimensions "2,1"} true;

var {:source_name "shared_A"} {:group_shared} $$kernel3.shared_A : [bv32]bv64;
axiom {:array_info "$$kernel3.shared_A"} {:group_shared} {:elem_width 64} {:source_name "shared_A"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel3.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel3.shared_A : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel3.shared_A : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsgt"} BV64_SGT(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel3"} {:kernel} $kernel3($alpha:bv64, $n:bv32, $m:bv32)
requires {:sourceloc_num 0} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $m == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SGE($n, 1bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SGE($m, 2bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 2bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m), 31bv32)), BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($m, 29bv32)), BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV64_MUL(7680bv64, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_MUL(511bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)))), 31bv64), 8192bv64), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SLE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV64_MUL(7680bv64, BV32_ZEXT64(local_id_y))), BV32_ZEXT64(BV32_MUL(511bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m)))), 31bv64), 8192bv64), 31bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m), $m))), 32bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$C ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 2bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$B ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV64_ADD(BV32_ZEXT64(local_id_y), 1bv64)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m)), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_y)), 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_y) == 0bv64 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m)), BV64_ADD(BV32_ZEXT64(local_id_y), 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c0.0:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $c4.0:bv64;
  var $cond:bv64;
  var $cond113:bv64;
  var $c3.0:bv64;
  var $cond126:bv64;
  var v1:bv64;
  var v3:bv64;
  var v0:bv64;
  var v5:bv64;
  var v2:bv32;
  var v4:bv32;
  var v10:bv64;
  var v12:bv64;
  var v7:bool;
  var v6:bool;
  var v8:bool;
  var v9:bool;
  var v11:bool;
  var v14:bool;
  var v13:bool;
  var v18:bool;
  var v19:bool;
  var v21:bool;
  var v20:bool;
  var v15:bool;
  var v16:bool;
  var v31:bv64;
  var v27:bv64;
  var v23:bv64;
  var v26:bv64;
  var v24:bv64;
  var v28:bv64;
  var v33:bv64;
  var v17:bv64;
  var v22:bv64;
  var v30:bool;
  var v32:bool;
  var v25:bool;
  var v29:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := local_id_y;
  v5 := BV32_ZEXT64(v4);
  $c0.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v6 := BV64_SLT($c0.0, BV32_SEXT64($n));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  $c1.0 := BV64_MUL(32bv64, v1);
  goto $for.cond.22;
$for.cond.22:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v7 := BV64_SLT($c1.0, BV32_SEXT64(BV32_SUB($m, 1bv32)));
  goto $truebb0, $falsebb0;
$for.body.26:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v8 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb1, $falsebb1;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v9 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v5, $c1.0), 2bv64));
  goto $truebb2, $falsebb2;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  assert {:sourceloc} {:sourceloc_num 14} true;
  v10 := $$C[BV64_ADD(BV64_MUL(BV64_ADD(v5, $c1.0), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 15} true;
  $$private_C[0bv32] := v10;
  v11 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v5, $c1.0), 18bv64));
  goto $truebb3, $falsebb3;
$if.then.48:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  assert {:sourceloc} {:sourceloc_num 17} true;
  v12 := $$C[BV64_ADD(BV64_MUL(BV64_ADD(BV64_ADD(v5, $c1.0), 16bv64), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 18} true;
  $$private_C[1bv32] := v12;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  goto $if.end.59;
$if.end.59:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $c2.0 := $c1.0;
  goto $for.cond.60;
$for.cond.60:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v13 := BV64_SLT($c2.0, BV32_SEXT64($m));
  goto $truebb4, $falsebb4;
$for.body.64:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v14 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v3, $c2.0), 1bv64));
  goto $truebb5, $falsebb5;
$if.then.70:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $c4.0 := v5;
  goto $for.cond.71;
$for.cond.71:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v15 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64));
  goto $truebb6, $falsebb6;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $cond := 31bv64;
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $cond := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c1.0), 1bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v16 := BV64_SLE($c4.0, $cond);
  goto $truebb7, $falsebb7;
$for.body.82:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  assert {:sourceloc} {:sourceloc_num 29} true;
  v17 := $$A[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c2.0), BV32_SEXT64($m)), BV64_ADD($c1.0, $c4.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 30} true;
  $$kernel3.shared_A[BV32_ADD(BV32_MUL(v2, 32bv32), $c4.0[32:0])] := v17;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $c4.0 := BV64_ADD($c4.0, 16bv64);
  goto $for.cond.71;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $if.end.95;
$if.end.95:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  call {:sourceloc_num 34} $bugle_barrier(1bv1, 1bv1);
  v18 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb8, $falsebb8;
$if.then.101:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  v19 := BV64_SGT(0bv64, BV64_ADD(BV64_SUB(BV64_ADD(v5, $c1.0), $c2.0), 1bv64));
  goto $truebb9, $falsebb9;
$cond.true.107:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $cond113 := 0bv64;
  goto $cond.end.112;
$cond.false.108:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $cond113 := BV64_ADD(BV64_SUB(BV64_ADD(v5, $c1.0), $c2.0), 1bv64);
  goto $cond.end.112;
$cond.end.112:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  $c3.0 := $cond113;
  goto $for.cond.114;
$for.cond.114:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  v20 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64));
  goto $truebb10, $falsebb10;
$cond.true.120:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  $cond126 := 31bv64;
  goto $cond.end.125;
$cond.false.121:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  $cond126 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64);
  goto $cond.end.125;
$cond.end.125:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  v21 := BV64_SLE($c3.0, $cond126);
  goto $truebb11, $falsebb11;
$for.body.129:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  assert {:sourceloc} {:sourceloc_num 44} true;
  v22 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c3.0), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 45} true;
  v23 := $$kernel3.shared_A[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), v4)];
  assert {:sourceloc} {:sourceloc_num 46} true;
  v24 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 47} true;
  $$private_C[0bv32] := FADD64(v24, FMUL64(FMUL64($alpha, v22), v23));
  v25 := BV64_SGE(BV64_ADD($c2.0, $c3.0), BV64_ADD(BV64_ADD(v5, $c1.0), 17bv64));
  goto $truebb12, $falsebb12;
$if.then.151:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  assert {:sourceloc} {:sourceloc_num 49} true;
  v26 := $$B[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c3.0), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 50} true;
  v27 := $$kernel3.shared_A[BV32_ADD(BV32_MUL($c3.0[32:0], 32bv32), BV64_ADD(v5, 16bv64)[32:0])];
  assert {:sourceloc} {:sourceloc_num 51} true;
  v28 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 52} true;
  $$private_C[1bv32] := FADD64(v28, FMUL64(FMUL64($alpha, v26), v27));
  goto $if.end.169;
$if.end.169:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $for.inc.170;
$for.inc.170:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  $c3.0 := BV64_ADD($c3.0, 1bv64);
  goto $for.cond.114;
$for.end.172:
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $if.end.173;
$if.end.173:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  call {:sourceloc_num 57} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.174;
$for.inc.174:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $c2.0 := BV64_ADD($c2.0, 32bv64);
  goto $for.cond.60;
$for.end.176:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v29 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c0.0), 1bv64));
  goto $truebb13, $falsebb13;
$land.lhs.true.182:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  v30 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v5, $c1.0), 2bv64));
  goto $truebb14, $falsebb14;
$if.then.188:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  assert {:sourceloc} {:sourceloc_num 62} true;
  v31 := $$private_C[0bv32];
  assert {:sourceloc} {:sourceloc_num 63} true;
  $$C[BV64_ADD(BV64_MUL(BV64_ADD(v5, $c1.0), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]] := v31;
  v32 := BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(v5, $c1.0), 18bv64));
  goto $truebb15, $falsebb15;
$if.then.203:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  assert {:sourceloc} {:sourceloc_num 65} true;
  v33 := $$private_C[1bv32];
  assert {:sourceloc} {:sourceloc_num 66} true;
  $$C[BV64_ADD(BV64_MUL(BV64_ADD(BV64_ADD(v5, $c1.0), 16bv64), BV32_SEXT64($n)), BV64_ADD(v3, $c0.0))[32:0]] := v33;
  goto $if.end.214;
$if.end.214:
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $if.end.215;
$if.end.215:
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  call {:sourceloc_num 69} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc.216;
$for.inc.216:
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  $c1.0 := BV64_ADD($c1.0, 8192bv64);
  goto $for.cond.22;
$for.end.218:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.inc.219;
$for.inc.219:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  $c0.0 := BV64_ADD($c0.0, 8192bv64);
  goto $for.cond;
$for.end.221:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  return;
$truebb:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 75} true;
  goto $for.end.221;
$truebb0:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 76} true;
  goto $for.body.26;
$falsebb0:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 77} true;
  goto $for.end.218;
$truebb1:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 78} true;
  goto $land.lhs.true;
$falsebb1:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  goto $if.end.59;
$truebb2:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $if.then;
$falsebb2:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  goto $if.end.59;
$truebb3:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 82} true;
  goto $if.then.48;
$falsebb3:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  goto $if.end;
$truebb4:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  goto $for.body.64;
$falsebb4:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  goto $for.end.176;
$truebb5:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  goto $if.then.70;
$falsebb5:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  goto $if.end.95;
$truebb6:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 88} true;
  goto $cond.true;
$falsebb6:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 89} true;
  goto $cond.false;
$truebb7:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  goto $for.body.82;
$falsebb7:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  goto $for.end;
$truebb8:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  goto $if.then.101;
$falsebb8:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  goto $if.end.173;
$truebb9:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 94} true;
  goto $cond.true.107;
$falsebb9:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 95} true;
  goto $cond.false.108;
$truebb10:
  assume {:partition} v20;
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  goto $cond.true.120;
$falsebb10:
  assume {:partition} !v20;
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $cond.false.121;
$truebb11:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $for.body.129;
$falsebb11:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  goto $for.end.172;
$truebb12:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $if.then.151;
$falsebb12:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  goto $if.end.169;
$truebb13:
  assume {:partition} v29;
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  goto $land.lhs.true.182;
$falsebb13:
  assume {:partition} !v29;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $if.end.215;
$truebb14:
  assume {:partition} v30;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $if.then.188;
$falsebb14:
  assume {:partition} !v30;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $if.end.215;
$truebb15:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $if.then.203;
$falsebb15:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $if.end.214;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
