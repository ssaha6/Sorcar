type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "alpha"} {:global} $$alpha : [bv32]bv64;
axiom {:array_info "$$alpha"} {:global} {:elem_width 64} {:source_name "alpha"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$alpha : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$alpha : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$alpha : bool;

var {:source_name "y"} {:global} $$y : [bv32]bv64;
axiom {:array_info "$$y"} {:global} {:elem_width 64} {:source_name "y"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$y : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$y : bool;

var {:source_name "z"} {:global} $$z : [bv32]bv64;
axiom {:array_info "$$z"} {:global} {:elem_width 64} {:source_name "z"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$z : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$z : bool;

var {:source_name "shared_alpha"} {:group_shared} $$kernel9.shared_alpha : [bv32]bv64;
axiom {:array_info "$$kernel9.shared_alpha"} {:group_shared} {:elem_width 64} {:source_name "shared_alpha"} {:source_elem_width 64} {:source_dimensions "1"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$kernel9.shared_alpha : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$kernel9.shared_alpha : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$kernel9.shared_alpha : bool;

var {:source_name "shared_y_1"} {:group_shared} $$kernel9.shared_y_1 : [bv32]bv64;
axiom {:array_info "$$kernel9.shared_y_1"} {:group_shared} {:elem_width 64} {:source_name "shared_y_1"} {:source_elem_width 64} {:source_dimensions "32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$kernel9.shared_y_1 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$kernel9.shared_y_1 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$kernel9.shared_y_1 : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel9"} {:kernel} $kernel9($n:bv32, $c0:bv64)
requires {:sourceloc_num 0} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if BV64_SLE($c0, BV32_SEXT64($n)) then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE($c0, 1bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), BV64_ADD($c0, 1bv64)) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$z ==> BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1999bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SLE($n, 2000bv32) then BV32_SUB($n, 1bv32) else 2000bv32))) == BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1bv64)) then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$y ==> BV32_OR(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)), 0bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), $c0), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)), 32bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(1048575bv64, BV32_ZEXT64(local_id_x))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)))), $c0), 32bv64), 1048576bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 1048575bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)), 1bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), (if BV32_SGE($n, 2bv32) then $n else 1bv32)))), 1048576bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c1.0:bv64;
  var v1:bv32;
  var v6:bool;
  var v4:bool;
  var v7:bool;
  var v3:bool;
  var v0:bv64;
  var v2:bv64;
  var v5:bv64;
  var v8:bv64;
  var v10:bv64;
  var v11:bv64;
  var v12:bv64;
  var v9:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := local_id_x;
  v2 := BV32_ZEXT64(v1);
  v3 := v2 == 0bv64;
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  v4 := BV64_SGE($c0, BV64_ADD(BV64_MUL(32bv64, v0), 1bv64));
  goto $truebb0, $falsebb0;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  assert {:sourceloc} {:sourceloc_num 8} true;
  v5 := $$alpha[0bv32];
  assert {:sourceloc} {:sourceloc_num 9} true;
  $$kernel9.shared_alpha[0bv32] := v5;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  call {:sourceloc_num 11} $bugle_barrier(1bv1, 1bv1);
  $c1.0 := BV64_MUL(32bv64, v0);
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v6 := BV64_SLT($c1.0, $c0);
  goto $truebb1, $falsebb1;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  v7 := BV64_SGE(BV64_ADD(v2, $c0), BV64_ADD($c1.0, 32bv64));
  goto $truebb2, $falsebb2;
$if.then.26:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  assert {:sourceloc} {:sourceloc_num 15} true;
  v8 := $$y[BV64_SUB(BV64_SUB(BV64_ADD(v2, $c0), $c1.0), 32bv64)[32:0]];
  assert {:sourceloc} {:sourceloc_num 16} true;
  $$kernel9.shared_y_1[v1] := v8;
  goto $if.end.31;
$if.end.31:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  call {:sourceloc_num 18} $bugle_barrier(1bv1, 1bv1);
  v9 := BV64_SGE($c0, BV64_ADD(BV64_ADD(v2, $c1.0), 1bv64));
  goto $truebb3, $falsebb3;
$if.then.36:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  assert {:sourceloc} {:sourceloc_num 20} true;
  v10 := $$y[BV64_ADD(v2, $c1.0)[32:0]];
  assert {:sourceloc} {:sourceloc_num 21} true;
  v11 := $$kernel9.shared_alpha[0bv32];
  assert {:sourceloc} {:sourceloc_num 22} true;
  v12 := $$kernel9.shared_y_1[BV64_ADD(BV64_SUB(0bv64, v2), 31bv64)[32:0]];
  assert {:sourceloc} {:sourceloc_num 23} true;
  $$z[BV64_ADD(v2, $c1.0)[32:0]] := FADD64(FMUL64(v11, v12), v10);
  goto $if.end.48;
$if.end.48:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  call {:sourceloc_num 25} $bugle_barrier(1bv1, 1bv1);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $c1.0 := BV64_ADD($c1.0, 1048576bv64);
  goto $for.cond;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  return;
$truebb:
  assume {:partition} v3;
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v3;
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  goto $if.end;
$truebb0:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  goto $if.end;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  goto $for.body;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  goto $for.end;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  goto $if.then.26;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  goto $if.end.31;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  goto $if.then.36;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  goto $if.end.48;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
