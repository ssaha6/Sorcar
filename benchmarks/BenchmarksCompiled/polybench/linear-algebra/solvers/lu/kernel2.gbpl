type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "A"} {:global} $$A : [bv32]bv64;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "shared_A_0"} {:group_shared} $$kernel2.shared_A_0 : [bv32]bv64;
axiom {:array_info "$$kernel2.shared_A_0"} {:group_shared} {:elem_width 64} {:source_name "shared_A_0"} {:source_elem_width 64} {:source_dimensions "32,32"} true;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _READ_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;
var {:race_checking} {:group_shared} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*,32"} _ATOMIC_HAS_OCCURRED_$$kernel2.shared_A_0 : bool;

const _WATCHED_OFFSET : bv32;
const {:__dominator_enabled} __dominator_enabled : bool;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FMUL64(bv64, bv64) : bv64;
function FSUB64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV64_SDIV(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsgt"} BV64_SGT(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel2"} {:kernel} $kernel2($n:bv32, $c0:bv64)
requires {:sourceloc_num 0} (if $n == 64bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if BV64_SLT($c0, BV32_SEXT64(BV32_SUB(BV32_MUL(2bv32, $n), 2bv32))) then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_MUL(2bv32, $n)), BV64_ADD($c0, 5bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, 1bv64) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), BV64_ADD($c0, 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(18446744073709551584bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 8160bv64), 8192bv64), 8160bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 15bv64), 16bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$A ==> BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 0bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_MUL(8192bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)))), BV32_ZEXT64(BV32_MUL(8191bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))), 8191bv64), 8192bv64), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 2bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)), 1bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), BV64_ADD($c0, 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 16bv64) == 0bv64 then 1bv1 else 0bv1)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 31bv32)), BV64_ADD(BV32_SEXT64($n), BV32_ZEXT64(local_id_x))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 2bv32), $n) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_SEXT64(BV32_ADD($n, 30bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($n, 29bv32)), BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV32_SEXT64($n), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))), BV64_MUL(8191bv64, $c0)), 29bv64), 8192bv64), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 15bv64), 16bv64) == 0bv64 then 1bv1 else 0bv1)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_SEXT64($n), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 32bv32))) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 30bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV32_ZEXT64(local_id_x), $c0), BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 61bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)), 59bv32)), BV64_ADD(BV64_MUL(2bv64, BV32_ZEXT64(local_id_x)), $c0)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 61bv32)), BV64_ADD(BV64_ADD(BV64_SREM(BV64_ADD(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))), BV64_MUL(8191bv64, $c0)), 61bv64), 8192bv64), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 15bv64), 16bv64) == 0bv64 then 1bv1 else 0bv1)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 3bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 29bv32)), BV64_ADD(BV32_ZEXT64(local_id_x), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 32bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)), 59bv32)), BV64_ADD(BV64_MUL(2bv64, BV32_ZEXT64(local_id_x)), $c0)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(18446744073709551584bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 8160bv64), 8192bv64), 8160bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(2bv64, BV64_SREM(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(18446744073709551584bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 8160bv64), 8192bv64)), BV32_ZEXT64(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))), BV64_ADD($c0, 16321bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 15bv64), 16bv64) == 0bv64 then 1bv1 else 0bv1)))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_y) == 0bv64 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_ADD($n, 29bv32)), $c0) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 31bv32)), $c0) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)), 59bv32)), BV64_ADD(BV64_MUL(2bv64, BV32_ZEXT64(local_id_x)), $c0)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 60bv32)), BV64_ADD(BV32_ZEXT64(local_id_x), $c0)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(15bv64, BV32_ZEXT64(local_id_y)), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 15bv64), 16bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $c1.0:bv64;
  var $cond:bv64;
  var $cond115:bv64;
  var $cond110:bv64;
  var $cond140:bv64;
  var $cond178:bv64;
  var $cond222:bv64;
  var $cond217:bv64;
  var $cond253:bv64;
  var $cond248:bv64;
  var $c2.0:bv64;
  var $cond301:bv64;
  var $c4.0:bv64;
  var $cond316:bv64;
  var $cond365:bv64;
  var $cond404:bv64;
  var $cond399:bv64;
  var $c4338.0:bv64;
  var $cond466:bv64;
  var $cond527:bv64;
  var $c4503.0:bv64;
  var $cond559:bv64;
  var v3:bv64;
  var v1:bv64;
  var v4:bv64;
  var v0:bv64;
  var v5:bool;
  var v6:bool;
  var v2:bv32;
  var v8:bool;
  var v7:bool;
  var v9:bool;
  var v10:bool;
  var v20:bv64;
  var v27:bv64;
  var v28:bv64;
  var v30:bv64;
  var v35:bv64;
  var v13:bool;
  var v12:bool;
  var v14:bool;
  var v11:bool;
  var v18:bool;
  var v17:bool;
  var v16:bool;
  var v15:bool;
  var v22:bool;
  var v21:bool;
  var v24:bool;
  var v23:bool;
  var v19:bool;
  var v29:bv32;
  var v31:bool;
  var v32:bool;
  var v26:bool;
  var v25:bool;
  var v33:bool;
  var v34:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 5} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := local_id_x;
  v3 := BV32_ZEXT64(v2);
  v4 := BV32_ZEXT64(local_id_y);
  $c1.0 := BV64_ADD(BV64_MUL(32bv64, v0), BV64_MUL(8192bv64, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(18446744073709551552bv64, v0), $c0), 16324bv64), 16384bv64)));
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 6} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 7} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32)) == v3) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 8} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32), 16bv32)) == v4) then 1bv1 else 0bv1) != 0bv1;
  v5 := BV64_SLT($c1.0, BV32_SEXT64($n));
  goto $truebb, $falsebb;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v6 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 0bv64);
  goto $truebb0, $falsebb0;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  $cond := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  $cond := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 8192bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  v7 := BV64_SGT(BV64_MUL(32bv64, v1), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond)), 8192bv64));
  goto $truebb1, $falsebb1;
$cond.true.77:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cond115 := BV64_MUL(32bv64, v1);
  goto $cond.end.114;
$cond.false.79:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v8 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 0bv64);
  goto $truebb2, $falsebb2;
$cond.true.89:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  $cond110 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end.109;
$cond.false.101:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond110 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 8192bv64);
  goto $cond.end.109;
$cond.end.109:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond115 := BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond110)), 8192bv64);
  goto $cond.end.114;
$cond.end.114:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  v9 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64), 0bv64);
  goto $truebb3, $falsebb3;
$cond.true.123:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $cond140 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end.139;
$cond.false.133:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $cond140 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64), 8192bv64);
  goto $cond.end.139;
$cond.end.139:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v10 := BV64_SGT($cond115, BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond140)), 8192bv64));
  goto $truebb4, $falsebb4;
$cond.true.146:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v11 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 0bv64);
  goto $truebb5, $falsebb5;
$cond.true.157:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  $cond178 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end.177;
$cond.false.169:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  $cond178 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 8192bv64);
  goto $cond.end.177;
$cond.end.177:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  v12 := BV64_SGT(BV64_MUL(32bv64, v1), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond178)), 8192bv64));
  goto $truebb6, $falsebb6;
$cond.true.184:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  $cond222 := BV64_MUL(32bv64, v1);
  goto $cond.end.221;
$cond.false.186:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  v13 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 0bv64);
  goto $truebb7, $falsebb7;
$cond.true.196:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  $cond217 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end.216;
$cond.false.208:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $cond217 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(32bv64, v1)), $c0), 30bv64), 8192bv64);
  goto $cond.end.216;
$cond.end.216:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $cond222 := BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond217)), 8192bv64);
  goto $cond.end.221;
$cond.end.221:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  $cond253 := $cond222;
  goto $cond.end.252;
$cond.false.223:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  v14 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64), 0bv64);
  goto $truebb8, $falsebb8;
$cond.true.231:
  assert {:block_sourceloc} {:sourceloc_num 33} true;
  $cond248 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64)), 8192bv64), 1bv64), 8192bv64));
  goto $cond.end.247;
$cond.false.241:
  assert {:block_sourceloc} {:sourceloc_num 34} true;
  $cond248 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551584bv64, v1), $c0), $c1.0), 62bv64), 8192bv64);
  goto $cond.end.247;
$cond.end.247:
  assert {:block_sourceloc} {:sourceloc_num 35} true;
  $cond253 := BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v1), BV64_MUL(8192bv64, $cond248)), 8192bv64);
  goto $cond.end.252;
$cond.end.252:
  assert {:block_sourceloc} {:sourceloc_num 36} true;
  $c2.0 := $cond253;
  goto $for.cond.254;
$for.cond.254:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 38} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32)) == v3) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 39} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32), 16bv32)) == v4) then 1bv1 else 0bv1) != 0bv1;
  v15 := BV64_SLT($c2.0, BV64_SDIV(BV64_ADD($c0, 1bv64), 2bv64));
  goto $truebb9, $falsebb9;
$for.body.276:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  v16 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1bv64));
  goto $truebb10, $falsebb10;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  v17 := BV64_SGT(v4, BV64_ADD(BV64_ADD(BV64_SUB(BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(v4, $c0), $c2.0), 17bv64), 16bv64), $c0), $c2.0), 31bv64));
  goto $truebb11, $falsebb11;
$cond.true.291:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $cond301 := v4;
  goto $cond.end.300;
$cond.false.292:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  $cond301 := BV64_ADD(BV64_ADD(BV64_SUB(BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(v4, $c0), $c2.0), 17bv64), 16bv64), $c0), $c2.0), 31bv64);
  goto $cond.end.300;
$cond.end.300:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  $c4.0 := $cond301;
  goto $for.cond.302;
$for.cond.302:
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  v18 := BV64_SLT(31bv64, BV64_ADD(BV64_ADD(BV64_SUB(BV32_SEXT64($n), $c0), $c2.0), 30bv64));
  goto $truebb12, $falsebb12;
$cond.true.309:
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  $cond316 := 31bv64;
  goto $cond.end.315;
$cond.false.310:
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  $cond316 := BV64_ADD(BV64_ADD(BV64_SUB(BV32_SEXT64($n), $c0), $c2.0), 30bv64);
  goto $cond.end.315;
$cond.end.315:
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  v19 := BV64_SLE($c4.0, $cond316);
  goto $truebb13, $falsebb13;
$for.body.319:
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  assert {:sourceloc} {:sourceloc_num 50} true;
  v20 := $$A[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_SUB(BV64_ADD(BV64_SUB($c0, $c2.0), $c4.0), 31bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 51} true;
  $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32bv32), $c4.0[32:0])] := v20;
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  $c4.0 := BV64_ADD($c4.0, 16bv64);
  goto $for.cond.302;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  call {:sourceloc_num 55} $bugle_barrier(1bv1, 1bv1);
  v21 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1bv64));
  goto $truebb14, $falsebb14;
$if.then.337:
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  v22 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0), 0bv64);
  goto $truebb15, $falsebb15;
$cond.true.346:
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  $cond365 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0)), 16bv64), 1bv64), 16bv64));
  goto $cond.end.364;
$cond.false.357:
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  $cond365 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0), 16bv64);
  goto $cond.end.364;
$cond.end.364:
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  v23 := BV64_SGT(v4, BV64_ADD(BV64_ADD(v4, BV64_MUL(16bv64, $cond365)), 16bv64));
  goto $truebb16, $falsebb16;
$cond.true.371:
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  $cond404 := v4;
  goto $cond.end.403;
$cond.false.372:
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  v24 := BV64_SLT(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0), 0bv64);
  goto $truebb17, $falsebb17;
$cond.true.380:
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  $cond399 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0)), 16bv64), 1bv64), 16bv64));
  goto $cond.end.398;
$cond.false.391:
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  $cond399 := BV64_SDIV(BV64_SUB(BV64_SUB(BV64_ADD(BV64_SUB(BV64_SUB(0bv64, v3), v4), $c0), $c1.0), $c2.0), 16bv64);
  goto $cond.end.398;
$cond.end.398:
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  $cond404 := BV64_ADD(BV64_ADD(v4, BV64_MUL(16bv64, $cond399)), 16bv64);
  goto $cond.end.403;
$cond.end.403:
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  $c4338.0 := $cond404;
  goto $for.cond.405;
$for.cond.405:
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 67} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32)) == v3) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 68} (if (BV32_AND(BV1_ZEXT32((if __dominator_enabled then 1bv1 else 0bv1)), BV1_ZEXT32((if _READ_HAS_OCCURRED_$$kernel2.shared_A_0 then 1bv1 else 0bv1))) != 0bv32 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32), 16bv32)) == BV64_ADD(BV64_SUB(0bv64, BV64_ADD(v4, 16bv64)), 31bv64)) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 69} (if (_WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32)) == v3) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 70} (if (_WRITE_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32), 16bv32)) == BV64_ADD(BV64_SUB(0bv64, BV64_ADD(v4, 16bv64)), 31bv64)) then 1bv1 else 0bv1) != 0bv1;
  v25 := BV64_SLT(31bv64, BV64_SUB(BV64_ADD(BV64_SUB(0bv64, $c2.0), BV64_SDIV(BV64_ADD($c0, 1bv64), 2bv64)), 1bv64));
  goto $truebb18, $falsebb18;
$cond.true.458:
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  $cond466 := 31bv64;
  goto $cond.end.465;
$cond.false.459:
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  $cond466 := BV64_SUB(BV64_ADD(BV64_SUB(0bv64, $c2.0), BV64_SDIV(BV64_ADD($c0, 1bv64), 2bv64)), 1bv64);
  goto $cond.end.465;
$cond.end.465:
  assert {:block_sourceloc} {:sourceloc_num 73} true;
  v26 := BV64_SLE($c4338.0, $cond466);
  goto $truebb19, $falsebb19;
$for.body.469:
  assert {:block_sourceloc} {:sourceloc_num 74} true;
  assert {:sourceloc} {:sourceloc_num 75} true;
  v27 := $$A[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_ADD($c2.0, $c4338.0))[32:0]];
  assert {:sourceloc} {:sourceloc_num 76} true;
  v28 := $$A[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c4338.0), BV32_SEXT64($n)), BV64_SUB(BV64_SUB($c0, $c2.0), $c4338.0))[32:0]];
  v29 := BV64_ADD(BV64_SUB(0bv64, $c4338.0), 31bv64)[32:0];
  assert {:sourceloc} {:sourceloc_num 77} true;
  v30 := $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32bv32), v29)];
  assert {:sourceloc} {:sourceloc_num 78} true;
  $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32bv32), v29)] := FSUB64(v30, FMUL64(v27, v28));
  goto $for.inc.493;
$for.inc.493:
  assert {:block_sourceloc} {:sourceloc_num 79} true;
  $c4338.0 := BV64_ADD($c4338.0, 16bv64);
  goto $for.cond.405;
$for.end.495:
  assert {:block_sourceloc} {:sourceloc_num 80} true;
  goto $if.end.496;
$if.end.496:
  assert {:block_sourceloc} {:sourceloc_num 81} true;
  call {:sourceloc_num 82} $bugle_barrier(1bv1, 1bv1);
  v31 := BV64_SGE(BV32_SEXT64($n), BV64_ADD(BV64_ADD(v3, $c1.0), 1bv64));
  goto $truebb20, $falsebb20;
$if.then.502:
  assert {:block_sourceloc} {:sourceloc_num 83} true;
  v32 := BV64_SGT(v4, BV64_ADD(BV64_SUB(v4, BV64_MUL(16bv64, BV64_SDIV(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(2bv64, v4), $c0), BV64_MUL(2bv64, $c2.0)), 33bv64), 32bv64))), 48bv64));
  goto $truebb21, $falsebb21;
$cond.true.515:
  assert {:block_sourceloc} {:sourceloc_num 84} true;
  $cond527 := v4;
  goto $cond.end.526;
$cond.false.516:
  assert {:block_sourceloc} {:sourceloc_num 85} true;
  $cond527 := BV64_ADD(BV64_SUB(v4, BV64_MUL(16bv64, BV64_SDIV(BV64_ADD(BV64_SUB(BV64_ADD(BV64_MUL(2bv64, v4), $c0), BV64_MUL(2bv64, $c2.0)), 33bv64), 32bv64))), 48bv64);
  goto $cond.end.526;
$cond.end.526:
  assert {:block_sourceloc} {:sourceloc_num 86} true;
  $c4503.0 := $cond527;
  goto $for.cond.528;
$for.cond.528:
  assert {:block_sourceloc} {:sourceloc_num 87} true;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 88} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32)) == v3) then 1bv1 else 0bv1) != 0bv1;
  assert {:do_not_predicate} {:originated_from_invariant} {:sourceloc_num 89} (if (_READ_HAS_OCCURRED_$$kernel2.shared_A_0 ==> BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), 32bv32), 16bv32)) == v4) then 1bv1 else 0bv1) != 0bv1;
  v33 := BV64_SLT(31bv64, BV64_ADD(BV64_ADD(BV64_ADD(BV64_SUB(v3, $c0), $c1.0), $c2.0), 30bv64));
  goto $truebb22, $falsebb22;
$cond.true.552:
  assert {:block_sourceloc} {:sourceloc_num 90} true;
  $cond559 := 31bv64;
  goto $cond.end.558;
$cond.false.553:
  assert {:block_sourceloc} {:sourceloc_num 91} true;
  $cond559 := BV64_ADD(BV64_ADD(BV64_ADD(BV64_SUB(v3, $c0), $c1.0), $c2.0), 30bv64);
  goto $cond.end.558;
$cond.end.558:
  assert {:block_sourceloc} {:sourceloc_num 92} true;
  v34 := BV64_SLE($c4503.0, $cond559);
  goto $truebb23, $falsebb23;
$for.body.562:
  assert {:block_sourceloc} {:sourceloc_num 93} true;
  assert {:sourceloc} {:sourceloc_num 94} true;
  v35 := $$kernel2.shared_A_0[BV32_ADD(BV32_MUL(v2, 32bv32), $c4503.0[32:0])];
  assert {:sourceloc} {:sourceloc_num 95} true;
  $$A[BV64_ADD(BV64_MUL(BV64_ADD(v3, $c1.0), BV32_SEXT64($n)), BV64_SUB(BV64_ADD(BV64_SUB($c0, $c2.0), $c4503.0), 31bv64))[32:0]] := v35;
  goto $for.inc.576;
$for.inc.576:
  assert {:block_sourceloc} {:sourceloc_num 96} true;
  $c4503.0 := BV64_ADD($c4503.0, 16bv64);
  goto $for.cond.528;
$for.end.578:
  assert {:block_sourceloc} {:sourceloc_num 97} true;
  goto $if.end.579;
$if.end.579:
  assert {:block_sourceloc} {:sourceloc_num 98} true;
  goto $for.inc.580;
$for.inc.580:
  assert {:block_sourceloc} {:sourceloc_num 99} true;
  $c2.0 := BV64_ADD($c2.0, 8192bv64);
  goto $for.cond.254;
$for.end.582:
  assert {:block_sourceloc} {:sourceloc_num 100} true;
  goto $for.inc.583;
$for.inc.583:
  assert {:block_sourceloc} {:sourceloc_num 101} true;
  $c1.0 := BV64_ADD($c1.0, 8192bv64);
  goto $for.cond;
$for.end.585:
  assert {:block_sourceloc} {:sourceloc_num 102} true;
  return;
$truebb:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 103} true;
  goto $for.body;
$falsebb:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 104} true;
  goto $for.end.585;
$truebb0:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 105} true;
  goto $cond.true;
$falsebb0:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 106} true;
  goto $cond.false;
$truebb1:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 107} true;
  goto $cond.true.77;
$falsebb1:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 108} true;
  goto $cond.false.79;
$truebb2:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 109} true;
  goto $cond.true.89;
$falsebb2:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 110} true;
  goto $cond.false.101;
$truebb3:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 111} true;
  goto $cond.true.123;
$falsebb3:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 112} true;
  goto $cond.false.133;
$truebb4:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 113} true;
  goto $cond.true.146;
$falsebb4:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 114} true;
  goto $cond.false.223;
$truebb5:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 115} true;
  goto $cond.true.157;
$falsebb5:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 116} true;
  goto $cond.false.169;
$truebb6:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 117} true;
  goto $cond.true.184;
$falsebb6:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 118} true;
  goto $cond.false.186;
$truebb7:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 119} true;
  goto $cond.true.196;
$falsebb7:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 120} true;
  goto $cond.false.208;
$truebb8:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 121} true;
  goto $cond.true.231;
$falsebb8:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 122} true;
  goto $cond.false.241;
$truebb9:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 123} true;
  goto $for.body.276;
$falsebb9:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 124} true;
  goto $for.end.582;
$truebb10:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 125} true;
  goto $if.then;
$falsebb10:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 126} true;
  goto $if.end;
$truebb11:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 127} true;
  goto $cond.true.291;
$falsebb11:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 128} true;
  goto $cond.false.292;
$truebb12:
  assume {:partition} v18;
  assert {:block_sourceloc} {:sourceloc_num 129} true;
  goto $cond.true.309;
$falsebb12:
  assume {:partition} !v18;
  assert {:block_sourceloc} {:sourceloc_num 130} true;
  goto $cond.false.310;
$truebb13:
  assume {:partition} v19;
  assert {:block_sourceloc} {:sourceloc_num 131} true;
  goto $for.body.319;
$falsebb13:
  assume {:partition} !v19;
  assert {:block_sourceloc} {:sourceloc_num 132} true;
  goto $for.end;
$truebb14:
  assume {:partition} v21;
  assert {:block_sourceloc} {:sourceloc_num 133} true;
  goto $if.then.337;
$falsebb14:
  assume {:partition} !v21;
  assert {:block_sourceloc} {:sourceloc_num 134} true;
  goto $if.end.496;
$truebb15:
  assume {:partition} v22;
  assert {:block_sourceloc} {:sourceloc_num 135} true;
  goto $cond.true.346;
$falsebb15:
  assume {:partition} !v22;
  assert {:block_sourceloc} {:sourceloc_num 136} true;
  goto $cond.false.357;
$truebb16:
  assume {:partition} v23;
  assert {:block_sourceloc} {:sourceloc_num 137} true;
  goto $cond.true.371;
$falsebb16:
  assume {:partition} !v23;
  assert {:block_sourceloc} {:sourceloc_num 138} true;
  goto $cond.false.372;
$truebb17:
  assume {:partition} v24;
  assert {:block_sourceloc} {:sourceloc_num 139} true;
  goto $cond.true.380;
$falsebb17:
  assume {:partition} !v24;
  assert {:block_sourceloc} {:sourceloc_num 140} true;
  goto $cond.false.391;
$truebb18:
  assume {:partition} v25;
  assert {:block_sourceloc} {:sourceloc_num 141} true;
  goto $cond.true.458;
$falsebb18:
  assume {:partition} !v25;
  assert {:block_sourceloc} {:sourceloc_num 142} true;
  goto $cond.false.459;
$truebb19:
  assume {:partition} v26;
  assert {:block_sourceloc} {:sourceloc_num 143} true;
  goto $for.body.469;
$falsebb19:
  assume {:partition} !v26;
  assert {:block_sourceloc} {:sourceloc_num 144} true;
  goto $for.end.495;
$truebb20:
  assume {:partition} v31;
  assert {:block_sourceloc} {:sourceloc_num 145} true;
  goto $if.then.502;
$falsebb20:
  assume {:partition} !v31;
  assert {:block_sourceloc} {:sourceloc_num 146} true;
  goto $if.end.579;
$truebb21:
  assume {:partition} v32;
  assert {:block_sourceloc} {:sourceloc_num 147} true;
  goto $cond.true.515;
$falsebb21:
  assume {:partition} !v32;
  assert {:block_sourceloc} {:sourceloc_num 148} true;
  goto $cond.false.516;
$truebb22:
  assume {:partition} v33;
  assert {:block_sourceloc} {:sourceloc_num 149} true;
  goto $cond.true.552;
$falsebb22:
  assume {:partition} !v33;
  assert {:block_sourceloc} {:sourceloc_num 150} true;
  goto $cond.false.553;
$truebb23:
  assume {:partition} v34;
  assert {:block_sourceloc} {:sourceloc_num 151} true;
  goto $for.body.562;
$falsebb23:
  assume {:partition} !v34;
  assert {:block_sourceloc} {:sourceloc_num 152} true;
  goto $for.end.578;
}
procedure {:source_name "bugle_barrier"} {:barrier} $bugle_barrier($0:bv1, $1:bv1);
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 2bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
