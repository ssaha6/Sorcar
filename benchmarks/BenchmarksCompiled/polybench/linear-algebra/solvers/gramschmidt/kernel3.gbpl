type _SIZE_T_TYPE = bv32;

procedure _ATOMIC_OP64(x : [bv32]bv64, y : bv32) returns (z : bv64, A : [bv32]bv64);
var {:source_name "A"} {:global} $$A : [bv32]bv64;
axiom {:array_info "$$A"} {:global} {:elem_width 64} {:source_name "A"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$A : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$A : bool;

var {:source_name "Q"} {:global} $$Q : [bv32]bv64;
axiom {:array_info "$$Q"} {:global} {:elem_width 64} {:source_name "Q"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$Q : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$Q : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$Q : bool;

var {:source_name "R"} {:global} $$R : [bv32]bv64;
axiom {:array_info "$$R"} {:global} {:elem_width 64} {:source_name "R"} {:source_elem_width 64} {:source_dimensions "*"} true;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _READ_HAS_OCCURRED_$$R : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _WRITE_HAS_OCCURRED_$$R : bool;
var {:race_checking} {:global} {:elem_width 64} {:source_elem_width 64} {:source_dimensions "*"} _ATOMIC_HAS_OCCURRED_$$R : bool;

const _WATCHED_OFFSET : bv32;
const {:global_offset_x} global_offset_x : bv32;
const {:global_offset_y} global_offset_y : bv32;
const {:global_offset_z} global_offset_z : bv32;
const {:group_id_x} group_id_x : bv32;
const {:group_id_y} group_id_y : bv32;
const {:group_size_x} group_size_x : bv32;
const {:group_size_y} group_size_y : bv32;
const {:group_size_z} group_size_z : bv32;
const {:local_id_x} local_id_x : bv32;
const {:local_id_y} local_id_y : bv32;
const {:num_groups_x} num_groups_x : bv32;
const {:num_groups_y} num_groups_y : bv32;
const {:num_groups_z} num_groups_z : bv32;
function FADD64(bv64, bv64) : bv64;
function FMUL64(bv64, bv64) : bv64;
function FSUB64(bv64, bv64) : bv64;
function {:bvbuiltin "bvadd"} BV32_ADD(bv32, bv32) : bv32;
function {:bvbuiltin "bvadd"} BV64_ADD(bv64, bv64) : bv64;
function {:bvbuiltin "bvand"} BV32_AND(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV32_MUL(bv32, bv32) : bv32;
function {:bvbuiltin "bvmul"} BV64_MUL(bv64, bv64) : bv64;
function {:bvbuiltin "bvor"} BV32_OR(bv32, bv32) : bv32;
function {:bvbuiltin "bvsdiv"} BV64_SDIV(bv64, bv64) : bv64;
function {:bvbuiltin "bvsge"} BV32_SGE(bv32, bv32) : bool;
function {:bvbuiltin "bvsge"} BV64_SGE(bv64, bv64) : bool;
function {:bvbuiltin "bvsgt"} BV64_SGT(bv64, bv64) : bool;
function {:bvbuiltin "bvsle"} BV32_SLE(bv32, bv32) : bool;
function {:bvbuiltin "bvsle"} BV64_SLE(bv64, bv64) : bool;
function {:bvbuiltin "bvslt"} BV64_SLT(bv64, bv64) : bool;
function {:bvbuiltin "bvsrem"} BV64_SREM(bv64, bv64) : bv64;
function {:bvbuiltin "bvsub"} BV32_SUB(bv32, bv32) : bv32;
function {:bvbuiltin "bvsub"} BV64_SUB(bv64, bv64) : bv64;
function {:bvbuiltin "bvudiv"} BV32_UDIV(bv32, bv32) : bv32;
function {:bvbuiltin "bvuge"} BV32_UGE(bv32, bv32) : bool;
function {:bvbuiltin "bvurem"} BV32_UREM(bv32, bv32) : bv32;
function {:bvbuiltin "sign_extend 32"} BV32_SEXT64(bv32) : bv64;
function {:bvbuiltin "zero_extend 31"} BV1_ZEXT32(bv1) : bv32;
function {:bvbuiltin "zero_extend 32"} BV32_ZEXT64(bv32) : bv64;
procedure {:source_name "kernel3"} {:kernel} $kernel3($n:bv32, $m:bv32, $c0:bv64)
requires {:sourceloc_num 0} (if $n == 1024bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 1} (if $m == 256bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:sourceloc_num 2} (if BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_SLE($n, 2147483647bv32) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV32_SGE($m, 1bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_SLE($m, 2147483647bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, 5bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64(BV32_MUL(5bv32, $n)), BV64_ADD($c0, 5bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_MUL(5bv64, BV64_SDIV(BV64_ADD(BV64_MUL(2bv64, $c0), 2bv64), 3bv64)), BV64_ADD(BV64_MUL(3bv64, $c0), 3bv64)) then 1bv1 else 0bv1))) != 0bv32 then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 3} (if (_WRITE_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_MUL(3bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)), 2bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_MUL(5bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(64bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(2bv64, BV32_ZEXT64(local_id_x))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 2bv64), 16384bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 4} (if (_READ_HAS_OCCURRED_$$Q ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_MUL(5bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)), 5bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_ADD(BV32_MUL(3bv32, $n), BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))), BV64_ADD($c0, 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(96bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(3bv64, BV32_ZEXT64(local_id_x))), BV32_ZEXT64(BV32_MUL(24575bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)))), $c0), 2bv64), 24576bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 5} (if (_READ_HAS_OCCURRED_$$R ==> BV32_OR(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV64_ADD(BV32_ZEXT64(local_id_y), 1bv64)) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), BV32_ZEXT64(local_id_y)), 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)), BV32_MUL(3bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 2bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_MUL(8191bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1))), BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV32_ZEXT64(group_id_y) == 0bv64 then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SGE(BV32_SEXT64($m), BV64_ADD(BV32_ZEXT64(local_id_y), 1bv64)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if $c0 == BV32_ZEXT64(BV32_ADD(BV32_ADD(BV32_MUL(2bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)), BV32_MUL(3bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 2bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), BV32_ZEXT64(BV32_MUL(8191bv32, BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $n)))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), 8192bv64) == 0bv64 then 1bv1 else 0bv1)))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
requires {:procedure_wide_invariant} {:do_not_predicate} {:sourceloc_num 6} (if (_READ_HAS_OCCURRED_$$A ==> BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV32_AND(BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 0bv64) then 1bv1 else 0bv1)), BV1_ZEXT32((if BV64_SLE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_x)), BV32_ZEXT64(local_id_x)), 8191bv64) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($m, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 0bv32) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV32_UGE($n, BV32_ADD(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), 1bv32)) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE($c0, BV32_ZEXT64(BV32_ADD(BV32_MUL(3bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n)), 2bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_MUL(5bv32, BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32)), BV64_MUL(32bv64, BV32_ZEXT64(group_id_y))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SGE(BV64_ADD(BV64_MUL(32bv64, BV32_ZEXT64(group_id_y)), 31bv64), BV32_ZEXT64(BV32_UREM(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m), 8192bv32))) then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_SUB(BV32_ZEXT64(local_id_y), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n), $m))), 16bv64) == 0bv64 then 1bv1 else 0bv1))), BV1_ZEXT32((if BV64_SREM(BV64_ADD(BV64_SUB(BV64_ADD(BV64_ADD(BV64_MUL(64bv64, BV32_ZEXT64(group_id_x)), BV64_MUL(2bv64, BV32_ZEXT64(local_id_x))), BV32_ZEXT64(BV32_UREM(BV32_UDIV(BV32_MUL(8bv32, _WATCHED_OFFSET), 8bv32), $n))), $c0), 2bv64), 16384bv64) == 0bv64 then 1bv1 else 0bv1))) != 0bv32) then 1bv1 else 0bv1) != 0bv1;
{
  var $cond:bv64;
  var $cond126:bv64;
  var $cond139:bv64;
  var $c1.0:bv64;
  var $c2.0:bv64;
  var $c4.0:bv64;
  var $cond186:bv64;
  var v3:bv64;
  var v0:bv64;
  var v1:bv64;
  var v2:bv64;
  var v4:bool;
  var v5:bool;
  var v7:bool;
  var v8:bool;
  var v6:bool;
  var v9:bool;
  var v10:bool;
  var v13:bool;
  var v12:bool;
  var v11:bool;
  var v20:bv64;
  var v19:bv64;
  var v18:bv64;
  var v17:bool;
  var v15:bool;
  var v16:bool;
  var v14:bool;
$entry:
  assert {:block_sourceloc} {:sourceloc_num 7} true;
  v0 := BV32_ZEXT64(group_id_x);
  v1 := BV32_ZEXT64(group_id_y);
  v2 := BV32_ZEXT64(local_id_x);
  v3 := BV32_ZEXT64(local_id_y);
  v4 := BV64_SGE(BV32_SEXT64(BV32_MUL(3bv32, $n)), BV64_ADD($c0, 1bv64));
  goto $truebb, $falsebb;
$land.lhs.true:
  assert {:block_sourceloc} {:sourceloc_num 8} true;
  v5 := BV64_SGE(BV64_MUL(5bv64, BV64_SDIV(BV64_ADD(BV64_MUL(2bv64, $c0), 2bv64), 3bv64)), BV64_ADD(BV64_MUL(3bv64, $c0), 5bv64));
  goto $truebb0, $falsebb0;
$lor.lhs.false:
  assert {:block_sourceloc} {:sourceloc_num 9} true;
  v6 := BV64_SGE($c0, BV32_SEXT64(BV32_MUL(3bv32, $n)));
  goto $truebb1, $falsebb1;
$land.lhs.true.47:
  assert {:block_sourceloc} {:sourceloc_num 10} true;
  v7 := BV64_SGE(BV64_MUL(5bv64, BV64_SDIV(BV64_ADD(BV64_ADD(BV32_SEXT64($n), $c0), 1bv64), 2bv64)), BV64_ADD(BV64_MUL(3bv64, $c0), 5bv64));
  goto $truebb2, $falsebb2;
$if.then:
  assert {:block_sourceloc} {:sourceloc_num 11} true;
  v8 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64), 0bv64);
  goto $truebb3, $falsebb3;
$cond.true:
  assert {:block_sourceloc} {:sourceloc_num 12} true;
  $cond := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64)), 16384bv64), 1bv64), 16384bv64));
  goto $cond.end;
$cond.false:
  assert {:block_sourceloc} {:sourceloc_num 13} true;
  $cond := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64), 16384bv64);
  goto $cond.end;
$cond.end:
  assert {:block_sourceloc} {:sourceloc_num 14} true;
  v9 := BV64_SGT(BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v0), BV64_MUL(8192bv64, $cond)), 8192bv64), BV64_ADD(BV64_MUL(32bv64, v0), BV64_MUL(8192bv64, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(18446744073709551520bv64, v0), $c0), 24480bv64), 24576bv64))));
  goto $truebb4, $falsebb4;
$cond.true.95:
  assert {:block_sourceloc} {:sourceloc_num 15} true;
  v10 := BV64_SLT(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64), 0bv64);
  goto $truebb5, $falsebb5;
$cond.true.105:
  assert {:block_sourceloc} {:sourceloc_num 16} true;
  $cond126 := BV64_SUB(0bv64, BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(0bv64, BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64)), 16384bv64), 1bv64), 16384bv64));
  goto $cond.end.125;
$cond.false.117:
  assert {:block_sourceloc} {:sourceloc_num 17} true;
  $cond126 := BV64_SDIV(BV64_SUB(BV64_ADD(BV64_SUB(BV32_SEXT64(BV32_SUB(0bv32, $n)), BV64_MUL(64bv64, v0)), $c0), 64bv64), 16384bv64);
  goto $cond.end.125;
$cond.end.125:
  assert {:block_sourceloc} {:sourceloc_num 18} true;
  $cond139 := BV64_ADD(BV64_ADD(BV64_MUL(32bv64, v0), BV64_MUL(8192bv64, $cond126)), 8192bv64);
  goto $cond.end.138;
$cond.false.130:
  assert {:block_sourceloc} {:sourceloc_num 19} true;
  $cond139 := BV64_ADD(BV64_MUL(32bv64, v0), BV64_MUL(8192bv64, BV64_SDIV(BV64_ADD(BV64_ADD(BV64_MUL(18446744073709551520bv64, v0), $c0), 24480bv64), 24576bv64)));
  goto $cond.end.138;
$cond.end.138:
  assert {:block_sourceloc} {:sourceloc_num 20} true;
  $c1.0 := $cond139;
  goto $for.cond;
$for.cond:
  assert {:block_sourceloc} {:sourceloc_num 21} true;
  v11 := BV64_SLT($c1.0, BV64_SDIV(BV64_MUL(2bv64, $c0), 5bv64));
  goto $truebb6, $falsebb6;
$for.body:
  assert {:block_sourceloc} {:sourceloc_num 22} true;
  v12 := BV64_SGE(BV64_ADD(BV64_ADD(BV64_ADD(BV32_SEXT64($n), BV64_MUL(2bv64, v2)), BV64_MUL(2bv64, $c1.0)), 1bv64), $c0);
  goto $truebb7, $falsebb7;
$land.lhs.true.152:
  assert {:block_sourceloc} {:sourceloc_num 23} true;
  v13 := BV64_SGE(BV64_ADD(BV64_ADD(BV64_MUL(3bv64, v2), BV64_MUL(3bv64, $c1.0)), 2bv64), $c0);
  goto $truebb8, $falsebb8;
$land.lhs.true.159:
  assert {:block_sourceloc} {:sourceloc_num 24} true;
  v14 := BV64_SGE(BV64_MUL(2bv64, $c0), BV64_ADD(BV64_ADD(BV64_MUL(5bv64, v2), BV64_MUL(5bv64, $c1.0)), 5bv64));
  goto $truebb9, $falsebb9;
$if.then.167:
  assert {:block_sourceloc} {:sourceloc_num 25} true;
  $c2.0 := BV64_MUL(32bv64, v1);
  goto $for.cond.169;
$for.cond.169:
  assert {:block_sourceloc} {:sourceloc_num 26} true;
  v15 := BV64_SLT($c2.0, BV32_SEXT64($m));
  goto $truebb10, $falsebb10;
$for.body.173:
  assert {:block_sourceloc} {:sourceloc_num 27} true;
  $c4.0 := v3;
  goto $for.cond.174;
$for.cond.174:
  assert {:block_sourceloc} {:sourceloc_num 28} true;
  v16 := BV64_SLT(31bv64, BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64));
  goto $truebb11, $falsebb11;
$cond.true.180:
  assert {:block_sourceloc} {:sourceloc_num 29} true;
  $cond186 := 31bv64;
  goto $cond.end.185;
$cond.false.181:
  assert {:block_sourceloc} {:sourceloc_num 30} true;
  $cond186 := BV64_SUB(BV64_SUB(BV32_SEXT64($m), $c2.0), 1bv64);
  goto $cond.end.185;
$cond.end.185:
  assert {:block_sourceloc} {:sourceloc_num 31} true;
  v17 := BV64_SLE($c4.0, $cond186);
  goto $truebb12, $falsebb12;
$for.body.189:
  assert {:block_sourceloc} {:sourceloc_num 32} true;
  assert {:sourceloc} {:sourceloc_num 33} true;
  v18 := $$A[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c4.0), BV32_SEXT64($n)), BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551614bv64, v2), $c0), BV64_MUL(2bv64, $c1.0)), 2bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 34} true;
  v19 := $$Q[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c4.0), BV32_SEXT64($n)), BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(3bv64, v2), $c0), BV64_MUL(3bv64, $c1.0)), 2bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 35} true;
  v20 := $$R[BV64_ADD(BV64_MUL(BV64_ADD(BV64_ADD(BV64_SUB(BV64_MUL(3bv64, v2), $c0), BV64_MUL(3bv64, $c1.0)), 2bv64), BV32_SEXT64($n)), BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551614bv64, v2), $c0), BV64_MUL(2bv64, $c1.0)), 2bv64))[32:0]];
  assert {:sourceloc} {:sourceloc_num 36} true;
  $$A[BV64_ADD(BV64_MUL(BV64_ADD($c2.0, $c4.0), BV32_SEXT64($n)), BV64_SUB(BV64_SUB(BV64_ADD(BV64_MUL(18446744073709551614bv64, v2), $c0), BV64_MUL(2bv64, $c1.0)), 2bv64))[32:0]] := FADD64(FMUL64(FSUB64(9223372036854775808bv64, v19), v20), v18);
  goto $for.inc;
$for.inc:
  assert {:block_sourceloc} {:sourceloc_num 37} true;
  $c4.0 := BV64_ADD($c4.0, 16bv64);
  goto $for.cond.174;
$for.end:
  assert {:block_sourceloc} {:sourceloc_num 38} true;
  goto $for.inc.238;
$for.inc.238:
  assert {:block_sourceloc} {:sourceloc_num 39} true;
  $c2.0 := BV64_ADD($c2.0, 8192bv64);
  goto $for.cond.169;
$for.end.240:
  assert {:block_sourceloc} {:sourceloc_num 40} true;
  goto $if.end;
$if.end:
  assert {:block_sourceloc} {:sourceloc_num 41} true;
  goto $for.inc.241;
$for.inc.241:
  assert {:block_sourceloc} {:sourceloc_num 42} true;
  $c1.0 := BV64_ADD($c1.0, 8192bv64);
  goto $for.cond;
$for.end.243:
  assert {:block_sourceloc} {:sourceloc_num 43} true;
  goto $if.end.244;
$if.end.244:
  assert {:block_sourceloc} {:sourceloc_num 44} true;
  return;
$truebb:
  assume {:partition} v4;
  assert {:block_sourceloc} {:sourceloc_num 45} true;
  goto $land.lhs.true;
$falsebb:
  assume {:partition} !v4;
  assert {:block_sourceloc} {:sourceloc_num 46} true;
  goto $lor.lhs.false;
$truebb0:
  assume {:partition} v5;
  assert {:block_sourceloc} {:sourceloc_num 47} true;
  goto $if.then;
$falsebb0:
  assume {:partition} !v5;
  assert {:block_sourceloc} {:sourceloc_num 48} true;
  goto $lor.lhs.false;
$truebb1:
  assume {:partition} v6;
  assert {:block_sourceloc} {:sourceloc_num 49} true;
  goto $land.lhs.true.47;
$falsebb1:
  assume {:partition} !v6;
  assert {:block_sourceloc} {:sourceloc_num 50} true;
  goto $if.end.244;
$truebb2:
  assume {:partition} v7;
  assert {:block_sourceloc} {:sourceloc_num 51} true;
  goto $if.then;
$falsebb2:
  assume {:partition} !v7;
  assert {:block_sourceloc} {:sourceloc_num 52} true;
  goto $if.end.244;
$truebb3:
  assume {:partition} v8;
  assert {:block_sourceloc} {:sourceloc_num 53} true;
  goto $cond.true;
$falsebb3:
  assume {:partition} !v8;
  assert {:block_sourceloc} {:sourceloc_num 54} true;
  goto $cond.false;
$truebb4:
  assume {:partition} v9;
  assert {:block_sourceloc} {:sourceloc_num 55} true;
  goto $cond.true.95;
$falsebb4:
  assume {:partition} !v9;
  assert {:block_sourceloc} {:sourceloc_num 56} true;
  goto $cond.false.130;
$truebb5:
  assume {:partition} v10;
  assert {:block_sourceloc} {:sourceloc_num 57} true;
  goto $cond.true.105;
$falsebb5:
  assume {:partition} !v10;
  assert {:block_sourceloc} {:sourceloc_num 58} true;
  goto $cond.false.117;
$truebb6:
  assume {:partition} v11;
  assert {:block_sourceloc} {:sourceloc_num 59} true;
  goto $for.body;
$falsebb6:
  assume {:partition} !v11;
  assert {:block_sourceloc} {:sourceloc_num 60} true;
  goto $for.end.243;
$truebb7:
  assume {:partition} v12;
  assert {:block_sourceloc} {:sourceloc_num 61} true;
  goto $land.lhs.true.152;
$falsebb7:
  assume {:partition} !v12;
  assert {:block_sourceloc} {:sourceloc_num 62} true;
  goto $if.end;
$truebb8:
  assume {:partition} v13;
  assert {:block_sourceloc} {:sourceloc_num 63} true;
  goto $land.lhs.true.159;
$falsebb8:
  assume {:partition} !v13;
  assert {:block_sourceloc} {:sourceloc_num 64} true;
  goto $if.end;
$truebb9:
  assume {:partition} v14;
  assert {:block_sourceloc} {:sourceloc_num 65} true;
  goto $if.then.167;
$falsebb9:
  assume {:partition} !v14;
  assert {:block_sourceloc} {:sourceloc_num 66} true;
  goto $if.end;
$truebb10:
  assume {:partition} v15;
  assert {:block_sourceloc} {:sourceloc_num 67} true;
  goto $for.body.173;
$falsebb10:
  assume {:partition} !v15;
  assert {:block_sourceloc} {:sourceloc_num 68} true;
  goto $for.end.240;
$truebb11:
  assume {:partition} v16;
  assert {:block_sourceloc} {:sourceloc_num 69} true;
  goto $cond.true.180;
$falsebb11:
  assume {:partition} !v16;
  assert {:block_sourceloc} {:sourceloc_num 70} true;
  goto $cond.false.181;
$truebb12:
  assume {:partition} v17;
  assert {:block_sourceloc} {:sourceloc_num 71} true;
  goto $for.body.189;
$falsebb12:
  assume {:partition} !v17;
  assert {:block_sourceloc} {:sourceloc_num 72} true;
  goto $for.end;
}
axiom (if group_size_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_z == 1bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if group_size_y == 16bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_x == 32bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if num_groups_y == 8bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_x == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_y == 0bv32 then 1bv1 else 0bv1) != 0bv1;
axiom (if global_offset_z == 0bv32 then 1bv1 else 0bv1) != 0bv1;
